import os
import hmac
import hashlib
import base64
import requests
import json
from config import CLOUDPAYMENTS_SECRET, CLOUDPAYMENTS_PUBLIC_ID  # –∏–∑ Railway –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç CloudPayments
def verify_signature(body: bytes, received_signature: str) -> bool:
    if not CLOUDPAYMENTS_SECRET:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è CLOUDPAYMENTS_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return False

    secret = CLOUDPAYMENTS_SECRET.encode("utf-8")
    computed_signature = base64.b64encode(
        hmac.new(secret, body, digestmod=hashlib.sha256).digest()
    ).decode()

    if computed_signature == received_signature:
        print("‚úÖ –ü–æ–¥–ø–∏—Å—å CloudPayments –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        return True
    else:
        print("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç.")
        print(f"üîé –û–∂–∏–¥–∞–ª–∞—Å—å: {computed_signature}")
        print(f"üì• –ü–æ–ª—É—á–µ–Ω–∞: {received_signature}")
        return False

# ‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook)
def send_test_payment():
    url = "https://empathai-bot-production.up.railway.app/payment/cloudpayments/result"
    headers = {
        "Content-Type": "application/json",
        "Content-HMAC": ""
    }

    data = {
        "Status": "Completed",
        "InvoiceId": "123456",
        "Amount": 1000,
        "Currency": "RUB",
        "Data": {
            "telegram_id": "944583273",
            "plan": "monthly"
        }
    }

    body = json.dumps(data, separators=(',', ':')).encode('utf-8')

    signature = base64.b64encode(
        hmac.new(
            CLOUDPAYMENTS_SECRET.encode(),
            body,
            hashlib.sha256
        ).digest()
    ).decode()

    headers["Content-HMAC"] = signature

    response = requests.post(url, headers=headers, data=body)
    print("üì§ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
    print("üßæ –°—Ç–∞—Ç—É—Å:", response.status_code)
    print("üì® –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.text)


# ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–æ)
def generate_payment_link(telegram_id: str, plan: str, amount: int = 10000) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞—Ç—ë–∂–Ω—É—é —Å—Å—ã–ª–∫—É CloudPayments —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
    - telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - plan: 'monthly' –∏–ª–∏ 'yearly'
    - amount: —Å—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (10000 = 100.00 —Ä—É–±.)
    """
    url = "https://api.cloudpayments.ru/orders/create"

    payload = {
        "Amount": amount / 100,
        "Currency": "RUB",
        "InvoiceId": f"sub_{telegram_id}_{plan}",
        "Description": f"–ü–æ–¥–ø–∏—Å–∫–∞ {plan}",
        "AccountId": str(telegram_id),
        "Data": {
            "telegram_id": str(telegram_id),
            "plan": plan
        }
    }

    try:
        response = requests.post(url, json=payload, auth=requests.auth.HTTPBasicAuth(CLOUDPAYMENTS_PUBLIC_ID, CLOUDPAYMENTS_SECRET))
        result = response.json()

        if result.get("Success") and "Model" in result:
            print("‚úÖ –°—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:", result["Model"]["Url"])
            return result["Model"]["Url"]
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏:", result)
            return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏"
    except Exception as e:
        print("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:", e)
        return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
