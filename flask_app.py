from flask import Flask, request, jsonify
import os
import openai
import requests
import json

app = Flask(__name__)

openai.api_key = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")
JSONBIN_BIN_ID = os.getenv("JSONBIN_BIN_ID")
JSONBIN_API_KEY = os.getenv("JSONBIN_API_KEY")

JSONBIN_URL = f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}"
HEADERS = {
    "X-Master-Key": JSONBIN_API_KEY,
    "Content-Type": "application/json"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSONBin
def load_user_threads():
    try:
        response = requests.get(JSONBIN_URL, headers=HEADERS)
        if response.status_code == 200:
            return response.json()["record"]
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ thread_id:", e)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSONBin
def save_user_threads(threads):
    try:
        requests.put(JSONBIN_URL, headers=HEADERS, json=threads)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ thread_id:", e)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
def load_text(name):
    try:
        with open(f"texts/{name}.txt", "r", encoding="utf-8") as f:
            return f.read()
    except:
        return "–¢–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

# –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def set_menu(chat_id):
    menu_buttons = [
        [{"text": "–ü–æ–º–æ—â—å"}, {"text": "–û –Ω–∞—Å"}],
        [{"text": "–°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"}, {"text": "–£—Å–ª–æ–≤–∏—è"}],
        [{"text": "–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç"}]
    ]
    payload = {
        "chat_id": chat_id,
        "reply_markup": {"keyboard": menu_buttons, "resize_keyboard": True, "one_time_keyboard": False}
    }
    requests.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage", json=payload)

user_threads = {}

@app.before_first_request
def initialize_threads():
    global user_threads
    user_threads = load_user_threads()

@app.route("/webhook", methods=["POST"])
def webhook():
    update = request.get_json()
    if not update or "message" not in update:
        return jsonify({"status": "no message"}), 400

    message = update["message"]
    chat_id = message["chat"]["id"]
    user_message = message.get("text", "").strip()

    set_menu(chat_id)

    if user_message == "/start":
        reply_text = (
            "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–ª–∞ ‚Äî —è —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é.\n"
            "–ü—Ä–æ–µ–∫—Ç EmpathAI —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –æ–±—Ä–µ—Å—Ç–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å, —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —á—É–≤—Å—Ç–≤–∞—Ö "
            "–∏ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏.\n"
            "–¢—ã –º–æ–∂–µ—à—å —Å–≤–æ–±–æ–¥–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–º, —á—Ç–æ –Ω–∞ –¥—É—à–µ ‚Äî —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –∏ –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –æ–ø–æ—Ä—É. üåø"
        )
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
            json={"chat_id": chat_id, "text": reply_text}
        )
        return jsonify({"status": "ok"}), 200

    if user_message.lower() == "/reset" or user_message.lower() == "—Å–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        if str(chat_id) in user_threads:
            del user_threads[str(chat_id)]
            save_user_threads(user_threads)
            reply_text = load_text("reset")
        else:
            reply_text = "–ò—Å—Ç–æ—Ä–∏—è —É–∂–µ –ø—É—Å—Ç–∞."
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
            json={"chat_id": chat_id, "text": reply_text}
        )
        return jsonify({"status": "reset"}), 200

    menu_responses = {
        "–ø–æ–º–æ—â—å": "help",
        "–æ –Ω–∞—Å": "about",
        "—É—Å–ª–æ–≤–∏—è": "terms",
        "–≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç": "faq"
    }

    key = user_message.lower()
    if key in menu_responses:
        reply_text = load_text(menu_responses[key])
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
            json={"chat_id": chat_id, "text": reply_text}
        )
        return jsonify({"status": "menu"}), 200

    thread_id = user_threads.get(str(chat_id))
    if not thread_id:
        thread = openai.beta.threads.create()
        thread_id = thread.id
        user_threads[str(chat_id)] = thread_id
        save_user_threads(user_threads)

    openai.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=user_message
    )

    run = openai.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=ASSISTANT_ID
    )

    while True:
        run_status = openai.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
        if run_status.status == "completed":
            break
        elif run_status.status in ["failed", "cancelled", "expired"]:
            return jsonify({"error": "Assistant run failed"}), 500

    messages = openai.beta.threads.messages.list(thread_id=thread_id)
    assistant_reply = ""
    for msg in reversed(messages.data):
        if msg.role == "assistant":
            assistant_reply = msg.content[0].text.value
            break

    if assistant_reply:
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
            json={"chat_id": chat_id, "text": assistant_reply}
        )

    return jsonify({"status": "ok"}), 200

if __name__ == "__main__":
    app.run(debug=True)
