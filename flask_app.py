import os
import json
import requests
from flask import Flask, request, jsonify
from telegram import Bot, Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, filters
import openai

app = Flask(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")
JSONBIN_BIN_ID = os.getenv("JSONBIN_BIN_ID")
JSONBIN_API_KEY = os.getenv("JSONBIN_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –ü–∞–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–∞–º–∏
TEXT_FOLDER = "texts"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å jsonbin.io

def load_history(user_id):
    try:
        response = requests.get(
            f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}/latest",
            headers={"X-Master-Key": JSONBIN_API_KEY}
        )
        response.raise_for_status()
        all_data = response.json().get("record", {})
        user_data = all_data.get(user_id, [])
        if isinstance(user_data, list):
            return user_data
        else:
            print(f"[!] –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ —Å–ø–∏—Å–æ–∫, —Å–±—Ä–∞—Å—ã–≤–∞—é.")
            return []
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []

def save_history(user_id, history):
    try:
        response = requests.get(
            f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}/latest",
            headers={"X-Master-Key": JSONBIN_API_KEY}
        )
        response.raise_for_status()
        all_data = response.json().get("record", {})
        all_data[user_id] = history

        update = requests.put(
            f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}",
            headers={
                "X-Master-Key": JSONBIN_API_KEY,
                "Content-Type": "application/json"
            },
            json={"record": all_data}
        )
        update.raise_for_status()
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

def reset_history(user_id):
    save_history(user_id, [])

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
def load_text(name):
    try:
        with open(f"{TEXT_FOLDER}/{name}.txt", "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenAI Assistant
def generate_response(user_id, message_text):
    history = load_history(user_id)
    history.append({"role": "user", "content": message_text})

    openai.api_key = OPENAI_API_KEY
    thread = openai.beta.threads.create()
    thread_id = thread.id

    for msg in history:
        openai.beta.threads.messages.create(
            thread_id=thread_id,
            role=msg["role"],
            content=msg["content"]
        )

    run = openai.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=ASSISTANT_ID
    )

    while True:
        status = openai.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
        if status.status == "completed":
            break
        elif status.status in ["failed", "cancelled", "expired"]:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    messages = openai.beta.threads.messages.list(thread_id=thread_id)
    reply = ""
    for msg in reversed(messages.data):
        if msg.role == "assistant":
            reply = msg.content[0].text.value
            break

    history.append({"role": "assistant", "content": reply})
    save_history(user_id, history)
    return reply

# –ú–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üÜò –ü–æ–º–æ—â—å"), KeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å")],
        [KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"), KeyboardButton("üìÑ –£—Å–ª–æ–≤–∏—è")],
        [KeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

@app.route(f"/webhook", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    chat_id = str(update.effective_chat.id)
    text = update.message.text.strip() if update.message.text else ""

    if text == "/start":
        welcome = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ª–∞ ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é.\n\n"
            "–Ø —Å–æ–∑–¥–∞–Ω –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ EmpathAI, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–±—è, "
            "–ø–æ–º–æ–≥–∞—Ç—å —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
            "–í—ã–±–∏—Ä–∞–π –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ."
        )
        bot.send_message(chat_id=chat_id, text=welcome, reply_markup=main_menu)
        return jsonify({"status": "ok"})

    elif text == "üÜò –ü–æ–º–æ—â—å":
        bot.send_message(chat_id=chat_id, text=load_text("help"), reply_markup=main_menu)
    elif text == "‚ÑπÔ∏è –û –Ω–∞—Å":
        bot.send_message(chat_id=chat_id, text=load_text("about"), reply_markup=main_menu)
    elif text == "üìÑ –£—Å–ª–æ–≤–∏—è":
        bot.send_message(chat_id=chat_id, text=load_text("terms"), reply_markup=main_menu)
    elif text == "‚ùì –í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç":
        bot.send_message(chat_id=chat_id, text=load_text("faq"), reply_markup=main_menu)
    elif text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        reset_history(chat_id)
        bot.send_message(chat_id=chat_id, text=load_text("reset"), reply_markup=main_menu)
    else:
        answer = generate_response(chat_id, text)
        bot.send_message(chat_id=chat_id, text=answer, reply_markup=main_menu)

    return jsonify({"status": "ok"})

if __name__ == "__main__":
    app.run(debug=True)
