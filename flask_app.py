import os
import json
import requests
from flask import Flask, request, jsonify
from telegram import Bot, Update, ReplyKeyboardMarkup, KeyboardButton
import openai
from datetime import datetime, timedelta

app = Flask(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")
JSONBIN_BIN_ID = os.getenv("JSONBIN_BIN_ID")
JSONBIN_API_KEY = os.getenv("JSONBIN_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –ü–∞–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–∞–º–∏
TEXT_FOLDER = "texts"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSONBin.io
def load_user_data(user_id):
    try:
        response = requests.get(
            f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}/latest",
            headers={"X-Master-Key": JSONBIN_API_KEY}
        )
        response.raise_for_status()
        data = response.json()
        all_data = data.get("record", {})
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ "record"
        while isinstance(all_data.get("record"), dict):
            all_data = all_data["record"]
        user_data = all_data.get(user_id, {
            "free_trial_start": None,
            "messages_today": 0,
            "last_message_date": None,
            "is_subscribed": False,
            "history": []
        })
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ user_data ‚Äî —Å–ø–∏—Å–æ–∫ (—Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
        if isinstance(user_data, list):
            print(f"[DEBUG] –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user_id {user_id}, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º")
            user_data = {
                "free_trial_start": None,
                "messages_today": 0,
                "last_message_date": None,
                "is_subscribed": False,
                "history": user_data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é
            }
            save_user_data(user_id, user_data)
        print(f"[DEBUG] –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id}: {json.dumps(user_data, ensure_ascii=False)}")
        return user_data
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}, Response: {response.text if 'response' in locals() else 'No response'}")
        return {"free_trial_start": None, "messages_today": 0, "last_message_date": None, "is_subscribed": False, "history": []}

def save_user_data(user_id, user_data):
    try:
        all_data = {user_id: user_data}  # –ß–∏—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ JSONBin.io: {json.dumps(all_data, ensure_ascii=False)}")
        update = requests.put(
            f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}",
            headers={
                "X-Master-Key": JSONBIN_API_KEY,
                "Content-Type": "application/json"
            },
            json=all_data
        )
        update.raise_for_status()
        print(f"[DEBUG] –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ JSONBin.io, Response: {update.text}")
        return True
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}, Response: {update.text if 'update' in locals() else 'No response'}")
        return False

def reset_user_data(user_id):
    user_data = {
        "free_trial_start": None,
        "messages_today": 0,
        "last_message_date": None,
        "is_subscribed": False,
        "history": []
    }
    save_user_data(user_id, user_data)

def reset_history(user_id):
    user_data = load_user_data(user_id)
    user_data["history"] = []
    save_user_data(user_id, user_data)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –º–µ–Ω—é
def load_text(name):
    try:
        with open(f"{TEXT_FOLDER}/{name}.txt", "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
def check_limits(user_id):
    user_data = load_user_data(user_id)
    today = datetime.now().strftime("%Y-%m-%d")
    print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è user_id {user_id}, today: {today}")
    
    # –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if user_data["last_message_date"] != today:
        user_data["messages_today"] = 0
        user_data["last_message_date"] = today
        save_user_data(user_id, user_data)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if user_data["is_subscribed"]:
        return True, user_data, "–í—ã –ø–æ–¥–ø–∏—Å—á–∏–∫, –ª–∏–º–∏—Ç–æ–≤ –Ω–µ—Ç! üòä", None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–∞–ª–∞
    if user_data["free_trial_start"] is None:
        return False, user_data, "–ü–æ–ª—É—á–∏ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (15 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å)! –ù–∞–∂–º–∏ üÜì –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton("üÜì –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    
    try:
        trial_start = datetime.strptime(user_data["free_trial_start"], "%Y-%m-%d")
        trial_end = trial_start + timedelta(days=7)
        if datetime.now() > trial_end:
            return False, user_data, "–¢–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?", ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        
        if user_data["messages_today"] >= 15:
            return False, user_data, f"–õ–∏–º–∏—Ç 15 —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É? –¢—Ä–∏–∞–ª –¥–æ {trial_end.strftime('%Y-%m-%d')}.", ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        
        return True, user_data, f"–û—Å—Ç–∞–ª–æ—Å—å {15 - user_data['messages_today']} —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è.", None
    except ValueError as e:
        print(f"[!] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã free_trial_start: {e}")
        user_data["free_trial_start"] = None
        save_user_data(user_id, user_data)
        return False, user_data, "–û—à–∏–±–∫–∞ —Å —Ç—Ä–∏–∞–ª–æ–º. –ù–∞–∂–º–∏ üÜì –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton("üÜì –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Open AI
def generate_response(user_id, message_text):
    if not message_text or message_text.strip() == "":
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã —è –º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å! üòä", None
    
    can_respond, user_data, limit_message, custom_menu = check_limits(user_id)
    print(f"[DEBUG] generate_response: can_respond={can_respond}, limit_message={limit_message}")
    if not can_respond:
        return limit_message, custom_menu
    
    history = user_data["history"]
    history.append({"role": "user", "content": message_text})
    user_data["history"] = history[-10:]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    user_data["messages_today"] += 1
    save_user_data(user_id, user_data)
    
    print(f"[DEBUG] –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Open AI: {json.dumps(history, ensure_ascii=False)}")
    openai.api_key = OPENAI_API_KEY
    try:
        thread = openai.beta.threads.create()
        thread_id = thread.id
        print(f"[DEBUG] –°–æ–∑–¥–∞–Ω thread_id: {thread_id}")

        for msg in history:
            if not msg["content"] or msg["content"].strip() == "":
                continue
            openai.beta.threads.messages.create(
                thread_id=thread_id,
                role=msg["role"],
                content=msg["content"]
            )

        run = openai.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=ASSISTANT_ID
        )
        print(f"[DEBUG] –°–æ–∑–¥–∞–Ω run_id: {run.id}")

        while True:
            status = openai.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
            print(f"[DEBUG] –°—Ç–∞—Ç—É—Å run: {status.status}")
            if status.status == "completed":
                break
            elif status.status in ["failed", "cancelled", "expired"]:
                return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (status: {status.status}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None

        messages = openai.beta.threads.messages.list(thread_id=thread_id)
        reply = ""
        for msg in reversed(messages.data):
            if msg.role == "assistant":
                reply = msg.content[0].text.value
                break

        history.append({"role": "assistant", "content": reply})
        user_data["history"] = history[-10:]
        save_user_data(user_id, user_data)
        print(f"[DEBUG] –û—Ç–≤–µ—Ç –æ—Ç Open AI: {reply}")
        return f"{reply}\n\n{limit_message}", None
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ Open AI: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!", None

# –ù–∏–∂–Ω–µ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"), KeyboardButton("‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ")],
        [KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"), KeyboardButton("üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")],
        [KeyboardButton("‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# –ú–µ–Ω—é –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
trial_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üÜì –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")],
        [KeyboardButton("üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"), KeyboardButton("‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ")],
        [KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"), KeyboardButton("üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")],
        [KeyboardButton("‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

@app.route(f"/webhook", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    if not update or not update.effective_chat:
        return jsonify({"status": "error", "message": "Invalid update"})

    chat_id = str(update.effective_chat.id)
    text = update.message.text.strip() if update.message and update.message.text else ""

    user_data = load_user_data(chat_id)
    print(f"[DEBUG] User data: {json.dumps(user_data, ensure_ascii=False)}")
    
    menu = trial_menu if not user_data.get("free_trial_start") else main_menu

    if text == "/start":
        reset_user_data(chat_id)
        welcome = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ª–∞ ‚Äî —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é.\n\n"
            "–ü–æ–ª—É—á–∏ 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (15 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å)! –ù–∞–∂–º–∏ üÜì –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ."
        )
        bot.send_message(chat_id=chat_id, text=welcome, reply_markup=trial_menu)
    elif text == "üÜì –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥":
        if not user_data.get("free_trial_start"):
            user_data["free_trial_start"] = datetime.now().strftime("%Y-%m-%d")
            user_data["last_message_date"] = datetime.now().strftime("%Y-%m-%d")
            user_data["messages_today"] = 0
            if save_user_data(chat_id, user_data):
                bot.send_message(chat_id=chat_id, text="–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞—á–∞–ª—Å—è! 7 –¥–Ω–µ–π, 15 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å. –ü–∏—à–∏ –º–Ω–µ!", reply_markup=main_menu)
            else:
                bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–∏–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!", reply_markup=menu)
        else:
            bot.send_message(chat_id=chat_id, text="–¢–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!", reply_markup=main_menu)
    elif text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        bot.send_message(chat_id=chat_id, text="–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ù–∞–ø–∏—à–∏, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!", reply_markup=main_menu)
    elif text == "üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        bot.send_message(chat_id=chat_id, text=load_text("support"), reply_markup=menu)
    elif text == "‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ":
        bot.send_message(chat_id=chat_id, text=load_text("info"), reply_markup=menu)
    elif text == "üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ":
        bot.send_message(chat_id=chat_id, text=load_text("rules"), reply_markup=menu)
    elif text == "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É":
        bot.send_message(chat_id=chat_id, text=load_text("faq"), reply_markup=menu)
    elif text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        reset_history(chat_id)
        bot.send_message(chat_id=chat_id, text=load_text("reset"), reply_markup=main_menu)
    else:
        answer, custom_menu = generate_response(chat_id, text)
        bot.send_message(chat_id=chat_id, text=answer, reply_markup=custom_menu or menu)

    return jsonify({"status": "ok"})

if __name__ == "__main__":
    app.run(debug=True)
