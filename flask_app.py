import os
import json
import asyncio
from datetime import datetime, timedelta
from flask import Flask, request
from telebot import types
import telebot
import openai

from utils import load_text, load_user_data, save_user_data

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–ª—é—á–∏
openai.api_key = os.environ.get("OPENAI_API_KEY")
ASSISTANT_ID = os.environ.get("OPENAI_ASSISTANT_ID")
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")

if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = telebot.TeleBot(TOKEN)

FREE_TRIAL_DAYS = 7
DAILY_MESSAGE_LIMIT = 15

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

def get_main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É")
    keyboard.row("‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ", "üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")
    keyboard.row("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥")
    keyboard.row("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    return keyboard


def get_keyboard_for_user(is_new_user):
    keyboard = get_main_menu()
    if is_new_user:
        keyboard.row("üÜì –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
    return keyboard


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_update(update):
    message = update.message
    if not message:
        return

    chat_id = message.chat.id
    user_id = str(chat_id)
    message_text = message.text.strip()

    user_data = load_user_data(user_id)
    thread_id = user_data.get("thread_id")

    if message_text == "/start" or message_text == "üÜì –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥":
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EmpathAI ‚Äî —Ç–≤–æ–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞.\n"
            "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–µ–Ω. –ó–∞–¥–∞–π —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å."
        )
        bot.send_message(chat_id, welcome_text, reply_markup=get_main_menu())
        return

    if message_text in ["üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É", "‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ", "üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"]:
        filename_map = {
            "üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": "support",
            "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É": "faq",
            "‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ": "info",
            "üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ": "rules",
            "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥": "reset"
        }
        filename = filename_map.get(message_text)

        if filename == "reset":
            user_data.pop("thread_id", None)
            save_user_data(user_id, user_data)

        text = load_text(filename)
        bot.send_message(chat_id, text, reply_markup=get_main_menu())
        return

    if not thread_id:
        thread = openai.beta.threads.create()
        thread_id = thread.id
        user_data["thread_id"] = thread_id
        save_user_data(user_id, user_data)

    openai.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=message_text
    )

    run = openai.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=ASSISTANT_ID
    )

    while True:
        run_status = openai.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
        if run_status.status == "completed":
            break
        elif run_status.status in ("failed", "cancelled", "expired"):
            bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return
        await asyncio.sleep(1)

    messages = openai.beta.threads.messages.list(thread_id=thread_id)
    for msg in reversed(messages.data):
        if msg.role == "assistant":
            answer = msg.content[0].text.value
            break
    else:
        answer = "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

    await bot.send_message(chat_id, answer, reply_markup=get_main_menu())


# Webhook
@app.route("/webhook", methods=["POST"])
def webhook():
    update = types.Update.de_json(request.get_json(force=True))
    asyncio.run(handle_update(update))
    return "OK", 200

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
