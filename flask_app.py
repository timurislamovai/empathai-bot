import os
import json
import asyncio
from datetime import datetime, timedelta
from flask import Flask, request
from telebot import types
import telebot

from utils import load_text, load_user_data, save_user_data

# Telegram Bot Init
import os

TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = telebot.TeleBot(TOKEN)

# Constants
FREE_TRIAL_DAYS = 7
DAILY_MESSAGE_LIMIT = 15

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É")
    keyboard.row("‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ", "üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")
    keyboard.row("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥")
    keyboard.row("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    return keyboard

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é + –∫–Ω–æ–ø–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
def get_keyboard_for_user(is_new_user):
    keyboard = get_main_menu()
    if is_new_user:
        keyboard.row("üÜì –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
    return keyboard

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async def handle_update(update):
    message = update.message
    if not message:
        return

    chat_id = message.chat.id
    user_id = str(chat_id)
    message_text = message.text

    user_data = load_user_data(user_id)
    if "registered" not in user_data:
        user_data["registered"] = datetime.utcnow().isoformat()
        user_data["trial_active"] = False
        user_data["messages"] = {}
        save_user_data(user_id, user_data)

    keyboard = get_keyboard_for_user(not user_data.get("trial_active", False))

    if message_text == "/start":
        reply = "–ü—Ä–∏–≤–µ—Ç! –Ø EmpathAI ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–æ–π, —Å–æ–º–Ω–µ–Ω–∏—è–º–∏ –∏ –º—ã—Å–ª—è–º–∏.\n\nüÜì –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É *–ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥*."
    elif message_text == "üÜì –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥":
        user_data["trial_active"] = True
        user_data["trial_start"] = datetime.utcnow().isoformat()
        user_data["messages"] = {}
        reply = load_text("texts/trial_info.txt")
    elif message_text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        reply = load_text("texts/subscribe.txt")
    elif message_text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        user_data["messages"] = {}
        reply = load_text("texts/reset.txt")
    elif message_text == "üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        reply = load_text("texts/support.txt")
    elif message_text == "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É":
        reply = load_text("texts/faq.txt")
    elif message_text == "‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ":
        reply = load_text("texts/info.txt")
    elif message_text == "üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ":
        reply = load_text("texts/rules.txt")
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        if user_data.get("trial_active", False):
            start_date = datetime.fromisoformat(user_data["trial_start"])
            if datetime.utcnow() - start_date > timedelta(days=FREE_TRIAL_DAYS):
                user_data["trial_active"] = False
                reply = load_text("texts/trial_expired.txt")
                save_user_data(user_id, user_data)
                await bot.send_message(chat_id, reply, reply_markup=keyboard)
                return

            today = datetime.utcnow().strftime("%Y-%m-%d")
            user_data["messages"].setdefault(today, 0)
            if user_data["messages"][today] >= DAILY_MESSAGE_LIMIT:
                reply = load_text("texts/trial_expired.txt")
            else:
                user_data["messages"][today] += 1
                reply = f"‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ ({user_data['messages'][today]}/{DAILY_MESSAGE_LIMIT})."
        else:
            reply = load_text("texts/trial_expired.txt")

    save_user_data(user_id, user_data)
    await bot.send_message(chat_id, reply, reply_markup=keyboard)

# Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞
@app.route("/webhook", methods=["POST"])
def webhook():
    update = types.Update.de_json(request.get_json(force=True), bot)
    asyncio.run(handle_update(update))
    return "OK", 200

# –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –Ω–∞ Render
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
