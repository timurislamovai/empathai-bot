import os
import json
import requests
import logging
from flask import Flask, request, jsonify
from telegram import Bot, Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Dispatcher
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")
JSONBIN_BIN_ID = os.getenv("JSONBIN_BIN_ID")
JSONBIN_API_KEY = os.getenv("JSONBIN_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dispatcher = Dispatcher(bot, None, workers=0)

# –ü–∞–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–∞–º–∏
TEXT_FOLDER = "texts"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSONBin.io
def load_history(user_id):
    try:
        response = requests.get(
            f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}/latest",
            headers={"X-Master-Key": JSONBIN_API_KEY}
        )
        response.raise_for_status()
        all_data = response.json().get("record", {})
        user_data = all_data.get(user_id, [])
        if isinstance(user_data, list):
            return user_data
        else:
            logger.warning(f"–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ —Å–ø–∏—Å–æ–∫, —Å–±—Ä–∞—Å—ã–≤–∞—é.")
            return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {user_id}: {e}")
        return []

def save_history(user_id, history):
    try:
        history = history[-10:] if len(history) > 10 else history
        all_data = {user_id: history}
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ JSONBin.io: {json.dumps(all_data, ensure_ascii=False)}")
        logger.debug(f"URL: https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}")
        update = requests.put(
            f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}",
            headers={
                "X-Master-Key": JSONBIN_API_KEY,
                "Content-Type": "application/json"
            },
            json={"record": all_data}
        )
        update.raise_for_status()
        logger.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ JSONBin.io –¥–ª—è {user_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {user_id}: {e}, Response: {update.text if 'update' in locals() else 'No response'}")
        return False

def reset_history(user_id):
    save_history(user_id, [])

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –º–µ–Ω—é
def load_text(name):
    try:
        with open(f"{TEXT_FOLDER}/{name}.txt", "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        logger.warning(f"–§–∞–π–ª {TEXT_FOLDER}/{name}.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Open AI
def generate_response(user_id, message_text):
    if not message_text or message_text.strip() == "":
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã —è –º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å! üòä"
    
    history = load_history(user_id)
    history.append({"role": "user", "content": message_text})
    logger.debug(f"–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Open AI –¥–ª—è {user_id}: {json.dumps(history, ensure_ascii=False)}")

    openai.api_key = OPENAI_API_KEY
    try:
        thread = openai.beta.threads.create()
        thread_id = thread.id
        logger.info(f"–°–æ–∑–¥–∞–Ω thread_id: {thread_id} –¥–ª—è {user_id}")

        for msg in history:
            if not msg["content"] or msg["content"].strip() == "":
                continue
            openai.beta.threads.messages.create(
                thread_id=thread_id,
                role=msg["role"],
                content=msg["content"]
            )

        run = openai.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=ASSISTANT_ID
        )
        logger.info(f"–°–æ–∑–¥–∞–Ω run_id: {run.id} –¥–ª—è {user_id}")

        while True:
            status = openai.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
            logger.debug(f"–°—Ç–∞—Ç—É—Å run –¥–ª—è {user_id}: {status.status}")
            if status.status == "completed":
                break
            elif status.status in ["failed", "cancelled", "expired"]:
                return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (status: {status.status}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        messages = openai.beta.threads.messages.list(thread_id=thread_id)
        reply = ""
        for msg in reversed(messages.data):
            if msg.role == "assistant":
                reply = msg.content[0].text.value
                break

        history.append({"role": "assistant", "content": reply})
        save_history(user_id, history)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç Open AI –¥–ª—è {user_id}: {reply}")
        return reply
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Open AI –¥–ª—è {user_id}: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"

# –ù–∏–∂–Ω–µ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"), KeyboardButton("‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ")],
        [KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"), KeyboardButton("üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")],
        [KeyboardButton("‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è
def get_agreement_inline_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="agree")]
    ])

@app.route(f"/webhook", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    if not update or not update.effective_chat:
        logger.error("–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        return jsonify({"status": "error", "message": "Invalid update"})

    chat_id = str(update.effective_chat.id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    if update.callback_query:
        query = update.callback_query
        query.answer()
        if query.data == "agree":
            history = load_history(chat_id)
            history.append({"role": "user", "content": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º"})
            save_history(chat_id, history)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–æ–≥–ª–∞—Å–∏–µ")
            bot.send_message(
                chat_id=chat_id,
                text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
                reply_markup=main_menu
            )
        return jsonify({"status": "ok"})

    text = update.message.text.strip() if update.message and update.message.text else ""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text}")

    if text == "/start":
        welcome = (
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ª–∞ ‚Äî —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é.\n\n"
            "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–æ–π, —Å—Ç—Ä–µ—Å—Å–æ–º –∏ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n"
            "–ù–∞–∂–∏–º–∞—è '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.\n"
            "–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∏–º –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ 'üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ' –≤ –º–µ–Ω—é."
        )
        bot.send_message(
            chat_id=chat_id,
            text=welcome,
            reply_markup=get_agreement_inline_keyboard()
        )
        bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ.",
            reply_markup=main_menu
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {chat_id}")
    elif text == "üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        bot.send_message(chat_id=chat_id, text=load_text("support"), reply_markup=main_menu)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è {chat_id}")
    elif text == "‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ":
        bot.send_message(chat_id=chat_id, text=load_text("info"), reply_markup=main_menu)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ –¥–ª—è {chat_id}")
    elif text == "üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ":
        bot.send_message(chat_id=chat_id, text=load_text("rules"), reply_markup=main_menu)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è {chat_id}")
    elif text == "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É":
        bot.send_message(chat_id=chat_id, text=load_text("faq"), reply_markup=main_menu)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–∏–¥ –ø–æ –±–æ—Ç—É –¥–ª—è {chat_id}")
    elif text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        reset_history(chat_id)
        bot.send_message(chat_id=chat_id, text=load_text("reset"), reply_markup=main_menu)
        logger.info(f"–°–±—Ä–æ—à–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è {chat_id}")
    else:
        answer = generate_response(chat_id, text)
        bot.send_message(chat_id=chat_id, text=answer, reply_markup=main_menu)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Open AI –¥–ª—è {chat_id}: {answer}")

    return jsonify({"status": "ok"})

if __name__ == "__main__":
    app.run(debug=True)
