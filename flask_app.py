import os
import json
import requests
from flask import Flask, request, jsonify
from telegram import Bot, Update, ReplyKeyboardMarkup, KeyboardButton
import openai

app = Flask(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")
JSONBIN_BIN_ID = os.getenv("JSONBIN_BIN_ID")
JSONBIN_API_KEY = os.getenv("JSONBIN_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# –ü–∞–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–∞–º–∏
TEXT_FOLDER = "texts"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSONBin.io
def load_history(user_id):
    try:
        response = requests.get(
            f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}/latest",
            headers={"X-Master-Key": JSONBIN_API_KEY}
        )
        response.raise_for_status()
        all_data = response.json().get("record", {})
        user_data = all_data.get(user_id, [])
        if isinstance(user_data, list):
            return user_data
        else:
            print(f"[!] –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ —Å–ø–∏—Å–æ–∫, —Å–±—Ä–∞—Å—ã–≤–∞—é.")
            return []
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []

def save_history(user_id, history):
    try:
        history = history[-10:] if len(history) > 10 else history
        all_data = {user_id: history}
        print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ JSONBin.io: {json.dumps(all_data, ensure_ascii=False)}")
        print(f"[DEBUG] URL: https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}")
        print(f"[DEBUG] Headers: {{'X-Master-Key': '***', 'Content-Type': 'application/json'}}")
        update = requests.put(
            f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}",
            headers={
                "X-Master-Key": JSONBIN_API_KEY,
                "Content-Type": "application/json"
            },
            json={"record": all_data}
        )
        update.raise_for_status()
        print(f"[DEBUG] –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ JSONBin.io, Response: {update.text}")
        return True
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}, Response: {update.text if 'update' in locals() else 'No response'}")
        return False

def reset_history(user_id):
    save_history(user_id, [])

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –º–µ–Ω—é
def load_text(name):
    try:
        with open(f"{TEXT_FOLDER}/{name}.txt", "r", encoding="utf-8") as f:
            return f.read()
    except FileNotFoundError:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Open AI
def generate_response(user_id, message_text):
    if not message_text or message_text.strip() == "":
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã —è –º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å! üòä"
    
    history = load_history(user_id)
    history.append({"role": "user", "content": message_text})
    print(f"[DEBUG] –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Open AI: {json.dumps(history, ensure_ascii=False)}")

    openai.api_key = OPENAI_API_KEY
    try:
        thread = openai.beta.threads.create()
        thread_id = thread.id
        print(f"[DEBUG] –°–æ–∑–¥–∞–Ω thread_id: {thread_id}")

        for msg in history:
            if not msg["content"] or msg["content"].strip() == "":
                continue
            openai.beta.threads.messages.create(
                thread_id=thread_id,
                role=msg["role"],
                content=msg["content"]
            )

        run = openai.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=ASSISTANT_ID
        )
        print(f"[DEBUG] –°–æ–∑–¥–∞–Ω run_id: {run.id}")

        while True:
            status = openai.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
            print(f"[DEBUG] –°—Ç–∞—Ç—É—Å run: {status.status}")
            if status.status == "completed":
                break
            elif status.status in ["failed", "cancelled", "expired"]:
                return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (status: {status.status}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        messages = openai.beta.threads.messages.list(thread_id=thread_id)
        reply = ""
        for msg in reversed(messages.data):
            if msg.role == "assistant":
                reply = msg.content[0].text.value
                break

        history.append({"role": "assistant", "content": reply})
        save_history(user_id, history)
        print(f"[DEBUG] –û—Ç–≤–µ—Ç –æ—Ç Open AI: {reply}")
        return reply
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ Open AI: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"

# –ù–∏–∂–Ω–µ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"), KeyboardButton("‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ")],
        [KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"), KeyboardButton("üìú –£—Å–ª–æ–≤–∏—è –ø–æ—å–∑–æ–≤–∞–Ω–∏—è")],
        [KeyboardButton("‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

@app.route(f"/webhook", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    if not update or not update.effective_chat:
        return jsonify({"status": "error", "message": "Invalid update"})

    chat_id = str(update.effective_chat.id)
    text = update.message.text.strip() if update.message and update.message.text else ""

    if text == "/start":
        welcome = (
            "–ü—Ä–∏–≤–µ—Ç, —è –ò–ª–∞ ‚Äî —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ —Å–µ–±—è –∏ –ø–æ–∏—Å–∫–µ –¥—É—à–µ–≤–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è.\n\n"
            "üíô –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –≤ —Å–ª–æ–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã, –ø–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —ç–º–æ—Ü–∏—è—Ö –∏ –Ω–∞–π—Ç–∏ –ø—É—Ç–∏ –∫ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—é.\n\n"
            "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ."
        )
        bot.send_message(chat_id=chat_id, text=welcome, reply_markup=main_menu)
    elif text == "üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        bot.send_message(chat_id=chat_id, text=load_text("support"), reply_markup=main_menu)
    elif text == "‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ":
        bot.send_message(chat_id=chat_id, text=load_text("info"), reply_markup=main_menu)
    elif text == "üìú –£—Å–ª–æ–≤–∏—è –ø–æ—å–∑–æ–≤–∞–Ω–∏—è":
        bot.send_message(chat_id=chat_id, text=load_text("rules"), reply_markup=main_menu)
    elif text == "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É":
        bot.send_message(chat_id=chat_id, text=load_text("faq"), reply_markup=main_menu)
    elif text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        reset_history(chat_id)
        bot.send_message(chat_id=chat_id, text=load_text("reset"), reply_markup=main_menu)
    else:
        answer = generate_response(chat_id, text)
        bot.send_message(chat_id=chat_id, text=answer, reply_markup=main_menu)

    return jsonify({"status": "ok"})

if __name__ == "__main__":
    app.run(debug=True)
