import os
import time
import openai
import json
import requests
from flask import Flask, request

app = Flask(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")

openai.api_key = OPENAI_API_KEY
client = openai

# üßº –û—á–∏—Å—Ç–∫–∞ Markdown –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤
def clean_markdown(text):
    import re
    text = re.sub(r"[\\*_`>#-]", "", text)  # —É–±–∏—Ä–∞–µ–º markdown
    text = re.sub(r"\n{3,}", "\n\n", text)   # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
    return text.strip()

# üìé –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return {
        "keyboard": [
            ["üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É"],
            ["üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"],
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

# üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_message(chat_id, text, reply_markup=None):
    payload = {
        "chat_id": chat_id,
        "text": text,
        "reply_markup": json.dumps(reply_markup) if reply_markup else None,
    }
    requests.post(f"{TELEGRAM_API_URL}/sendMessage", data=payload)

# üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()

    if "message" not in data:
        return "ok"

    message = data["message"]
    chat_id = message["chat"]["id"]
    text = message.get("text", "")

    if text == "/start":
        welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø EmpathAI ‚Äî —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ó–∞–¥–∞–π –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é."
        send_message(chat_id, welcome_text, reply_markup=main_menu())
        return "ok"

    elif text in ["üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É", "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"]:
        static_replies = {
            "üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.",
            "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É": "–í–æ—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç: –Ω–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å ‚Äî –ø–æ–ª—É—á–∏ –æ—Ç–≤–µ—Ç.",
            "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": "–ü–æ–ª—å–∑—É—è—Å—å –±–æ—Ç–æ–º, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
            "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É": "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä–æ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞.",
        }
        send_message(chat_id, static_replies[text], reply_markup=main_menu())
        return "ok"

    # üß† –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GPT Assistant
    thread = client.beta.threads.create()
    thread_id = thread.id

    client.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=text
    )

    run = client.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=ASSISTANT_ID
    )

    # ‚è± –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞ OpenAI —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    timeout = 10  # —Å–µ–∫—É–Ω–¥
    start_time = time.time()
    while True:
        run_status = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
        if run_status.status == "completed":
            break
        if time.time() - start_time > timeout:
            send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu())
            return "timeout"
        time.sleep(0.5)

    messages = client.beta.threads.messages.list(thread_id=thread_id)
    assistant_reply = messages.data[0].content[0].text.value

    # üßπ –û—á–∏—Å—Ç–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
    cleaned_reply = clean_markdown(assistant_reply)
    send_message(chat_id, cleaned_reply, reply_markup=main_menu())

    return "ok"

# üñ• –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Render
@app.route("/", methods=["GET"])
def index():
    return "EmpathAI Telegram Bot is running!"
