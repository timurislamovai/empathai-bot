import os

# üîç –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:
print("DEBUG: TELEGRAM_BOT_TOKEN =", os.getenv("TELEGRAM_BOT_TOKEN"))
print("DEBUG: OPENAI_API_KEY =", os.getenv("OPENAI_API_KEY"))
print("DEBUG: ASSISTANT_ID =", os.getenv("ASSISTANT_ID"))
print("DEBUG: JSONBIN_API_KEY =", os.getenv("JSONBIN_API_KEY"))
print("DEBUG: JSONBIN_BIN_ID =", os.getenv("JSONBIN_BIN_ID"))

# üí• –ü—Ä–µ—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
if not all([
    os.getenv("TELEGRAM_BOT_TOKEN"),
    os.getenv("OPENAI_API_KEY"),
    os.getenv("ASSISTANT_ID"),
    os.getenv("JSONBIN_API_KEY"),
    os.getenv("JSONBIN_BIN_ID")
]):
    raise ValueError("‚ùå –û–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã.")

# ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
import json
import asyncio
from datetime import datetime, timedelta
from flask import Flask, request
from telebot import types
import telebot
import requests

# Flask app
app = Flask(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
ASSISTANT_ID = os.environ.get("OPENAI_ASSISTANT_ID")
JSONBIN_API_KEY = os.environ.get("JSONBIN_API_KEY")
JSONBIN_BIN_ID = os.environ.get("JSONBIN_BIN_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞
if not all([TELEGRAM_BOT_TOKEN, OPENAI_API_KEY, ASSISTANT_ID, JSONBIN_API_KEY, JSONBIN_BIN_ID]):
    raise ValueError("–û–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã.")

bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –ú–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É")
    keyboard.row("‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ", "üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")
    keyboard.row("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥", "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    return keyboard

# –†–∞–±–æ—Ç–∞ —Å JSONBin
def load_user_data():
    url = f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}/latest"
    headers = {"X-Master-Key": JSONBIN_API_KEY}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json().get("record", {})
    return {}

def save_user_data(data):
    url = f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}"
    headers = {
        "Content-Type": "application/json",
        "X-Master-Key": JSONBIN_API_KEY,
        "X-Bin-Versioning": "false"
    }
    requests.put(url, headers=headers, json=data)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
async def handle_update(update):
    message = update.message
    if not message:
        return

    chat_id = message.chat.id
    user_id = str(chat_id)
    text = message.text.strip()

    user_data = load_user_data()
    user_entry = user_data.get(user_id, {"start_date": None, "used_messages": 0})

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        user_entry["thread_id"] = None
        await send_message(chat_id, "–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.", get_main_menu())
        user_data[user_id] = user_entry
        save_user_data(user_data)
        return

    if text in ["üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É", "‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ", "üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"]:
        filename = {
            "üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": "support",
            "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É": "faq",
            "‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ": "info",
            "üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ": "rules"
        }.get(text, "faq")

        try:
            with open(f"texts/{filename}.txt", "r", encoding="utf-8") as f:
                content = f.read()
        except:
            content = "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
        await send_message(chat_id, content, get_main_menu())
        return

    # OpenAI API (Assistant API)
    thread_id = user_entry.get("thread_id")

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ thread
    if not thread_id:
        r = requests.post("https://api.openai.com/v1/threads", headers={
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "OpenAI-Beta": "assistants=v1"
        })
        thread_id = r.json()["id"]
        user_entry["thread_id"] = thread_id

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ thread
    requests.post(
        f"https://api.openai.com/v1/threads/{thread_id}/messages",
        headers={
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "OpenAI-Beta": "assistants=v1",
            "Content-Type": "application/json"
        },
        json={"role": "user", "content": text}
    )

    # –ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    run_resp = requests.post(
        f"https://api.openai.com/v1/threads/{thread_id}/runs",
        headers={
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "OpenAI-Beta": "assistants=v1",
            "Content-Type": "application/json"
        },
        json={"assistant_id": ASSISTANT_ID}
    )

    run_id = run_resp.json()["id"]

    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    status = "in_progress"
    while status in ["queued", "in_progress"]:
        await asyncio.sleep(1)
        r = requests.get(
            f"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}",
            headers={
                "Authorization": f"Bearer {OPENAI_API_KEY}",
                "OpenAI-Beta": "assistants=v1"
            }
        )
        status = r.json()["status"]

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    messages_resp = requests.get(
        f"https://api.openai.com/v1/threads/{thread_id}/messages",
        headers={
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "OpenAI-Beta": "assistants=v1"
        }
    )

    last_message = messages_resp.json()["data"][0]["content"][0]["text"]["value"]

    await send_message(chat_id, last_message, get_main_menu())

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = user_entry
    save_user_data(user_data)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_message(chat_id, text, keyboard=None):
    bot.send_message(chat_id, text, reply_markup=keyboard)

# Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞
@app.route("/webhook", methods=["POST"])
def webhook():
    update = types.Update.de_json(request.get_json(force=True))
    asyncio.run(handle_update(update))
    return "OK", 200

# –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
