import os
import requests
from flask import Flask, request
from telegram import Bot, ReplyKeyboardMarkup, KeyboardButton
from openai import OpenAI
import json

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
app = Flask(__name__)
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
JSONBIN_API_KEY = os.getenv("JSONBIN_API_KEY")
JSONBIN_BIN_ID = os.getenv("JSONBIN_BIN_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")

openai_client = OpenAI(api_key=OPENAI_API_KEY)
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ===
def main_menu():
    buttons = [["üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É"], ["üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"]]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# === –†–∞–±–æ—Ç–∞ —Å JSONBin –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è thread_id ===
def get_thread_id(user_id):
    headers = {
        "X-Master-Key": JSONBIN_API_KEY,
    }
    url = f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}/latest"
    response = requests.get(url, headers=headers)

    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ JSONBin GET: {response.status_code} ‚Äî {response.text}")
        return None

    try:
        data = response.json()
        record = data.get("record", {})
        return record.get(str(user_id))
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –∏–∑ JSONBin:", e)
        return None


def save_thread_id(user_id, thread_id):
    headers = {
        "Content-Type": "application/json",
        "X-Master-Key": JSONBIN_API_KEY,
        "X-Bin-Private": "true"
    }

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    url_get = f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}/latest"
    response = requests.get(url_get, headers={"X-Master-Key": JSONBIN_API_KEY})

    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ JSONBin GET –ø–µ—Ä–µ–¥ PUT: {response.status_code} ‚Äî {response.text}")
        current_data = {}
    else:
        try:
            current_data = response.json().get("record", {})
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö:", e)
            current_data = {}

    current_data[str(user_id)] = thread_id

    url_patch = f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}"
    response = requests.put(url_patch, headers=headers, json={"record": current_data})

    if response.status_code != 200:
        print(f"‚ùå –û—à–∏–±–∫–∞ JSONBin PUT: {response.status_code} ‚Äî {response.text}")
    else:
        print(f"‚úÖ Thread ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

def reset_thread_id(user_id):
    url = f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}"
    headers = {
        "X-Master-Key": JSONBIN_API_KEY,
        "Content-Type": "application/json"
    }
    response = requests.get(url + "/latest", headers=headers)
    data = response.json()["record"]
    data.pop(str(user_id), None)
    requests.put(url, headers=headers, json=data)

# === –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ ===
def read_file(name):
    try:
        with open(name, encoding="utf-8") as f:
            return f.read()
    except:
        return "[–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω]"

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram ===
def send_message(chat_id, text, reply_markup=None):
    payload = {
        "chat_id": chat_id,
        "text": text,
        "reply_markup": reply_markup.to_dict() if reply_markup else None
    }
    requests.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage", json=payload)

# === –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ OpenAI Assistant ===
def send_to_assistant(user_id, user_input):
    thread_id = get_thread_id(user_id)
    if not thread_id:
        thread = openai_client.beta.threads.create()
        thread_id = thread.id
        save_thread_id(user_id, thread_id)

    openai_client.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=user_input
    )

    run = openai_client.beta.threads.runs.create(
        thread_id=thread_id,
        assistant_id=ASSISTANT_ID,
        instructions="–û—Ç–≤–µ—á–∞–π –±–µ–∑ Markdown, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π *, **, --- –∏ ###. –ü–∏—à–∏ –∫—Ä–∞—Å–∏–≤–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ, –∫–∞–∫ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π —á–µ–ª–æ–≤–µ–∫."
    )

    while True:
        status = openai_client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
        if status.status == "completed":
            break

    messages = openai_client.beta.threads.messages.list(thread_id=thread_id)
    for msg in reversed(messages.data):
        if msg.role == "assistant":
            return msg.content[0].text.value
    return "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.json
    message = data.get("message")
    if not message:
        return "ok"

    text = message.get("text", "")
    chat_id = message["chat"]["id"]
    user_id = message["from"]["id"]

    if text == "/start":
        welcome = (
            "–ü—Ä–∏–≤–µ—Ç, —è –ò–ª–∞ ‚Äî —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ —Å–µ–±—è –∏ –ø–æ–∏—Å–∫–µ –¥—É—à–µ–≤–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è\n\n"
            "üíô –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –≤ —Å–ª–æ–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã, –ø–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —ç–º–æ—Ü–∏—è—Ö –∏ –Ω–∞–π—Ç–∏ –ø—É—Ç–∏ –∫ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—é.\n"
            "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ"
        )
        send_message(chat_id, welcome, reply_markup=main_menu())
        return "ok"

    elif text == "üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        send_message(chat_id, read_file("support.txt"))
        return "ok"
    elif text == "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É":
        send_message(chat_id, read_file("faq.txt"))
        return "ok"
    elif text == "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è":
        send_message(chat_id, read_file("rules.txt"))
        return "ok"
    elif text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        send_message(chat_id, read_file("subscribe.txt"))
        return "ok"
    elif text.lower() in ["—Å–±—Ä–æ—Å", "—Å–±—Ä–æ—Å–∏—Ç—å", "—Å–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"]:
        reset_thread_id(user_id)
        send_message(chat_id, read_file("reset.txt"))
        return "ok"

    # –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–µ—Ä–µ–∑ GPT
    response = send_to_assistant(user_id, text)
    send_message(chat_id, response)
    return "ok"

# === –ó–∞–ø—É—Å–∫ ===
@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == "__main__":
    app.run(debug=True)
