import os
import time
import json
import requests
from flask import Flask, request
from dotenv import load_dotenv

from db import SessionLocal
from models import User

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = Flask(__name__)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")


def main_menu():
    return {
        "keyboard": [
            [{"text": "üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"}, {"text": "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É"}],
            [{"text": "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"}, {"text": "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"}],
            [{"text": "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"}]
        ],
        "resize_keyboard": True
    }


# === –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ===
def get_user(chat_id):
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=str(chat_id)).first()
    session.close()
    return user


def save_user(chat_id, thread_id):
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=str(chat_id)).first()
    if not user:
        user = User(telegram_id=str(chat_id), thread_id=thread_id)
        session.add(user)
    else:
        user.thread_id = thread_id
    session.commit()
    session.close()


def reset_thread(chat_id):
    session = SessionLocal()
    user = session.query(User).filter_by(telegram_id=str(chat_id)).first()
    if user:
        user.thread_id = None
        session.commit()
    session.close()


# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram ===
def send_message(chat_id, text, reply_markup=None):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
    response = requests.post(url, json=payload)
    if response.status_code != 200:
        print(f"[ERROR] Telegram send failed: {response.status_code} {response.text}")


# === Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===
@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        update = request.get_json()
        handle_update(update)
        return "OK"
    except Exception as e:
        print(f"[ERROR] Webhook exception: {e}")
        return "Internal Server Error", 500


# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ===
def handle_update(update):
    message = update.get("message")
    if not message:
        return

    chat_id = message["chat"]["id"]
    text = message.get("text", "").strip()

    # –ö–æ–º–∞–Ω–¥–∞ /start
    if text == "/start":
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–ü—Ä–∏–≤–µ—Ç, —è –ò–ª–∞ ‚Äî —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ —Å–µ–±—è –∏ –ø–æ–∏—Å–∫–µ –¥—É—à–µ–≤–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è.\n\n"
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ."
        )
        send_message(chat_id, welcome_text, reply_markup=main_menu())
        return

    # –°–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞
    if text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        reset_thread(chat_id)
        send_message(chat_id, "–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ?", reply_markup=main_menu())
        return

    # –ú–µ–Ω—é-—Ñ–∞–π–ª—ã
    if text in ["üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É", "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"]:
        filename = {
            "üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": "support",
            "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É": "faq",
            "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É": "subscribe",
            "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": "rules"
        }.get(text, "faq")
        try:
            with open(f"texts/{filename}.txt", "r", encoding="utf-8") as f:
                content = f.read()
        except FileNotFoundError:
            content = "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
        send_message(chat_id, content, reply_markup=main_menu())
        return

    # GPT-–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Assistant API
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "OpenAI-Beta": "assistants=v2",
        "Content-Type": "application/json"
    }

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ thread_id
    user = get_user(chat_id)
    thread_id = user.thread_id if user and user.thread_id else None

    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
    if not thread_id:
        thread_res = requests.post(
            f"https://api.openai.com/v1/assistants/{ASSISTANT_ID}/sessions",
            headers=headers,
            json={}
        )
        if thread_res.status_code != 200:
            send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏.", reply_markup=main_menu())
            return
        thread_id = thread_res.json().get("id")
        save_user(chat_id, thread_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    msg_payload = {
        "messages": [
            {"role": "user", "content": {"type": "text", "text": {"value": text}}}
        ]
    }
    requests.post(
        f"https://api.openai.com/v1/threads/{thread_id}/messages",
        headers=headers,
        json=msg_payload
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º run
    run_payload = {"assistant_id": ASSISTANT_ID}
    run_res = requests.post(
        f"https://api.openai.com/v1/threads/{thread_id}/runs",
        headers=headers,
        json=run_payload
    )
    if run_res.status_code != 200:
        send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AI-—Å–µ—Å—Å–∏–∏.", reply_markup=main_menu())
        return
    run_id = run_res.json().get("id")

    # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    for _ in range(30):
        time.sleep(1)
        check = requests.get(
            f"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}",
            headers=headers
        )
        status = check.json().get("status")
        if status == "completed":
            break
    else:
        send_message(chat_id, "‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.", reply_markup=main_menu())
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è run
    while True:
        run_status = requests.get(
            f"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}",
            headers=headers
        ).json()

        if run_status["status"] == "completed":
            break
        elif run_status["status"] == "failed":
            send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=main_menu())
            return
        time.sleep(1)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    messages_res = requests.get(
        f"https://api.openai.com/v1/threads/{thread_id}/messages",
        headers=headers
    )
    if messages_res.status_code != 200:
        send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.", reply_markup=main_menu())
        return

    messages = messages_res.json().get("data", [])
    # –ù–∞–π–¥—ë–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    assistant_reply = next(
        (msg for msg in messages if msg.get("role") == "assistant"),
        None
    )

    if assistant_reply:
        parts = assistant_reply.get("content", [])
        full_text = "".join(
            part["text"]["value"]
            for part in parts
            if part.get("type") == "text"
        )
        send_message(chat_id, full_text.strip(), reply_markup=main_menu())
            break
        
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
