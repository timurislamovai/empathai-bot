import os
import time
import json
import requests
import logging
from flask import Flask, request, jsonify
from dotenv import load_dotenv
from functools import wraps
from threading import Thread
import signal
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Render
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]  # –¢–æ–ª—å–∫–æ stdout –¥–ª—è Render
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    ASSISTANT_ID = os.getenv("ASSISTANT_ID")
    JSONBIN_API_KEY = os.getenv("JSONBIN_API_KEY")
    JSONBIN_BIN_ID = os.getenv("JSONBIN_BIN_ID")
    JSONBIN_URL = f"https://api.jsonbin.io/v3/b/{JSONBIN_BIN_ID}"
    
    # –¢–∞–π–º-–∞—É—Ç—ã –∏ –ª–∏–º–∏—Ç—ã (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è Render)
    REQUEST_TIMEOUT = 15  # –£–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    MAX_RETRIES = 2       # –£–º–µ–Ω—å—à–µ–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    OPENAI_WAIT_TIMEOUT = 25  # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    TELEGRAM_MESSAGE_LIMIT = 4096

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def validate_config():
    required_vars = [
        'TELEGRAM_BOT_TOKEN', 'OPENAI_API_KEY', 'ASSISTANT_ID',
        'JSONBIN_API_KEY', 'JSONBIN_BIN_ID'
    ]
    missing = [var for var in required_vars if not getattr(Config, var)]
    if missing:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing}")
        return False
    return True

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def handle_errors(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")
            return None
    return wrapper

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è retry –ª–æ–≥–∏–∫–∏ (—É–ø—Ä–æ—â–µ–Ω –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤)
def retry(max_attempts=2, delay=0.5):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            for attempt in range(max_attempts):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    if attempt == max_attempts - 1:
                        logger.error(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {func.__name__}: {e}")
                        raise
                    logger.warning(f"–ü–æ–≤—Ç–æ—Ä {attempt + 1} –¥–ª—è {func.__name__}: {e}")
                    time.sleep(delay)
            return None
        return wrapper
    return decorator

class TelegramAPI:
    @staticmethod
    def main_menu():
        return {
            "keyboard": [
                [{"text": "üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"}, {"text": "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É"}],
                [{"text": "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"}, {"text": "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"}],
                [{"text": "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"}, {"text": "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"}],
                [{"text": "üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"}]
            ],
            "resize_keyboard": True
        }

    @staticmethod
    @retry(max_attempts=Config.MAX_RETRIES)
    def send_message(chat_id, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ª–∏–º–∏—Ç–æ–≤ –¥–ª–∏–Ω—ã"""
        if not text:
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return False
            
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(text) > Config.TELEGRAM_MESSAGE_LIMIT:
            parts = [text[i:i+Config.TELEGRAM_MESSAGE_LIMIT] 
                    for i in range(0, len(text), Config.TELEGRAM_MESSAGE_LIMIT)]
            for i, part in enumerate(parts):
                markup = reply_markup if i == len(parts) - 1 else None
                if not TelegramAPI._send_single_message(chat_id, part, markup):
                    return False
                time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            return True
        else:
            return TelegramAPI._send_single_message(chat_id, text, reply_markup)

    @staticmethod
    def _send_single_message(chat_id, text, reply_markup=None):
        url = f"https://api.telegram.org/bot{Config.TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": chat_id, 
            "text": text,
            "parse_mode": "HTML"
        }
        if reply_markup:
            payload["reply_markup"] = json.dumps(reply_markup)
        
        try:
            response = requests.post(
                url, 
                json=payload, 
                timeout=Config.REQUEST_TIMEOUT
            )
            if response.status_code == 200:
                return True
            else:
                logger.error(f"Telegram API error: {response.status_code} - {response.text}")
                return False
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

class DataStorage:
    @staticmethod
    @handle_errors
    @retry(max_attempts=Config.MAX_RETRIES)
    def get_thread_id(chat_id):
        headers = {"X-Master-Key": Config.JSONBIN_API_KEY}
        try:
            response = requests.get(
                Config.JSONBIN_URL, 
                headers=headers, 
                timeout=Config.REQUEST_TIMEOUT
            )
            if response.status_code == 200:
                data = response.json().get("record", {})
                return data.get(str(chat_id))
            else:
                logger.error(f"JSONBin get error: {response.status_code}")
                return None
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è thread_id: {e}")
            return None

    @staticmethod
    @handle_errors
    @retry(max_attempts=Config.MAX_RETRIES)
    def save_thread_id(chat_id, thread_id):
        headers = {
            "X-Master-Key": Config.JSONBIN_API_KEY,
            "Content-Type": "application/json"
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            response = requests.get(
                Config.JSONBIN_URL, 
                headers=headers, 
                timeout=Config.REQUEST_TIMEOUT
            )
            data = response.json().get("record", {}) if response.status_code == 200 else {}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            data[str(chat_id)] = thread_id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            response = requests.put(
                Config.JSONBIN_URL, 
                headers=headers, 
                json=data, 
                timeout=Config.REQUEST_TIMEOUT
            )
            return response.status_code == 200
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è thread_id: {e}")
            return False

    @staticmethod
    @handle_errors
    @retry(max_attempts=Config.MAX_RETRIES)
    def reset_thread_id(chat_id):
        headers = {
            "X-Master-Key": Config.JSONBIN_API_KEY,
            "Content-Type": "application/json"
        }
        
        try:
            response = requests.get(
                Config.JSONBIN_URL, 
                headers=headers, 
                timeout=Config.REQUEST_TIMEOUT
            )
            if response.status_code == 200:
                data = response.json().get("record", {})
                if str(chat_id) in data:
                    del data[str(chat_id)]
                    response = requests.put(
                        Config.JSONBIN_URL, 
                        headers=headers, 
                        json=data, 
                        timeout=Config.REQUEST_TIMEOUT
                    )
                    return response.status_code == 200
            return True
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ thread_id: {e}")
            return False

class FileManager:
    @staticmethod
    @handle_errors
    def get_text_content(filename):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            with open(f"texts/{filename}.txt", "r", encoding="utf-8") as f:
                content = f.read().strip()
                return content if content else "üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø—É—Å—Ç–æ–µ."
        except FileNotFoundError:
            logger.warning(f"–§–∞–π–ª texts/{filename}.txt –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return "üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ."

class OpenAIAssistant:
    @staticmethod
    def get_headers():
        return {
            "Authorization": f"Bearer {Config.OPENAI_API_KEY}",
            "OpenAI-Beta": "assistants=v2",
            "Content-Type": "application/json"
        }

    @staticmethod
    @handle_errors
    def create_thread():
        try:
            response = requests.post(
                "https://api.openai.com/v1/threads",
                headers=OpenAIAssistant.get_headers(),
                timeout=Config.REQUEST_TIMEOUT
            )
            if response.status_code == 200:
                return response.json()["id"]
            else:
                logger.error(f"OpenAI thread creation error: {response.status_code}")
                return None
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è thread: {e}")
            return None

    @staticmethod
    @handle_errors
    def send_message_to_thread(thread_id, message):
        payload = {"role": "user", "content": message}
        try:
            response = requests.post(
                f"https://api.openai.com/v1/threads/{thread_id}/messages",
                headers=OpenAIAssistant.get_headers(),
                json=payload,
                timeout=Config.REQUEST_TIMEOUT
            )
            return response.status_code == 200
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ thread: {e}")
            return False

    @staticmethod
    @handle_errors
    def run_assistant(thread_id):
        payload = {"assistant_id": Config.ASSISTANT_ID}
        try:
            response = requests.post(
                f"https://api.openai.com/v1/threads/{thread_id}/runs",
                headers=OpenAIAssistant.get_headers(),
                json=payload,
                timeout=Config.REQUEST_TIMEOUT
            )
            if response.status_code == 200:
                return response.json()["id"]
            else:
                logger.error(f"OpenAI run creation error: {response.status_code}")
                return None
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
            return None

    @staticmethod
    @handle_errors
    def wait_for_completion(thread_id, run_id):
        for attempt in range(Config.OPENAI_WAIT_TIMEOUT):
            try:
                response = requests.get(
                    f"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}",
                    headers=OpenAIAssistant.get_headers(),
                    timeout=Config.REQUEST_TIMEOUT
                )
                if response.status_code == 200:
                    status = response.json().get("status")
                    if status == "completed":
                        return True
                    elif status in ["failed", "cancelled", "expired"]:
                        logger.error(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}")
                        return False
                time.sleep(1)
            except requests.exceptions.RequestException as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                time.sleep(2)
        
        logger.warning("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è OpenAI")
        return False

    @staticmethod
    @handle_errors
    def get_assistant_response(thread_id):
        try:
            response = requests.get(
                f"https://api.openai.com/v1/threads/{thread_id}/messages",
                headers=OpenAIAssistant.get_headers(),
                timeout=Config.REQUEST_TIMEOUT
            )
            if response.status_code == 200:
                messages = response.json().get("data", [])
                for msg in messages:
                    if msg["role"] == "assistant":
                        return msg["content"][0]["text"]["value"]
            return None
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
            return None

class MessageHandler:
    @staticmethod
    def handle_start_command(chat_id):
        welcome_text = (
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EmpathAI!</b>\n\n"
            "–Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è –∏ —Å–Ω–∏–∂–µ–Ω–∏—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
            "üìã –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ."
        )
        TelegramAPI.send_message(chat_id, welcome_text, reply_markup=TelegramAPI.main_menu())

    @staticmethod
    def handle_reset_command(chat_id):
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ reset.txt
        reset_content = FileManager.get_text_content("reset")
        TelegramAPI.send_message(chat_id, reset_content)
        
        # –ó–∞—Ç–µ–º —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
        if DataStorage.reset_thread_id(chat_id):
            TelegramAPI.send_message(
                chat_id, 
                "‚úÖ –î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ?", 
                reply_markup=TelegramAPI.main_menu()
            )
        else:
            TelegramAPI.send_message(
                chat_id, 
                "‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∏–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                reply_markup=TelegramAPI.main_menu()
            )

    @staticmethod
    def handle_menu_commands(chat_id, text):
        filename_map = {
            "üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": "support",
            "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É": "faq",
            "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É": "subscribe",
            "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": "rules",
            "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": "info",
            "üÜì –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥": "trial_info"
        }
        
        filename = filename_map.get(text)
        if filename:
            content = FileManager.get_text_content(filename)
            TelegramAPI.send_message(chat_id, content, reply_markup=TelegramAPI.main_menu())
            return True
        return False

    @staticmethod
    def handle_ai_conversation(chat_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ AI –¥–∏–∞–ª–æ–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def process_ai_request():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º thread
                thread_id = DataStorage.get_thread_id(chat_id)
                if not thread_id:
                    thread_id = OpenAIAssistant.create_thread()
                    if not thread_id:
                        TelegramAPI.send_message(
                            chat_id, 
                            "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                            reply_markup=TelegramAPI.main_menu()
                        )
                        return
                    DataStorage.save_thread_id(chat_id, thread_id)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ thread
                if not OpenAIAssistant.send_message_to_thread(thread_id, text):
                    TelegramAPI.send_message(
                        chat_id, 
                        "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                        reply_markup=TelegramAPI.main_menu()
                    )
                    return

                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                run_id = OpenAIAssistant.run_assistant(thread_id)
                if not run_id:
                    TelegramAPI.send_message(
                        chat_id, 
                        "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AI-—Å–µ—Å—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                        reply_markup=TelegramAPI.main_menu()
                    )
                    return

                # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                if not OpenAIAssistant.wait_for_completion(thread_id, run_id):
                    TelegramAPI.send_message(
                        chat_id, 
                        "‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", 
                        reply_markup=TelegramAPI.main_menu()
                    )
                    return

                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
                response = OpenAIAssistant.get_assistant_response(thread_id)
                if response:
                    TelegramAPI.send_message(chat_id, response, reply_markup=TelegramAPI.main_menu())
                else:
                    TelegramAPI.send_message(
                        chat_id, 
                        "ü§ñ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", 
                        reply_markup=TelegramAPI.main_menu()
                    )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ AI –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è chat_id {chat_id}: {e}")
                TelegramAPI.send_message(
                    chat_id, 
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                    reply_markup=TelegramAPI.main_menu()
                )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        Thread(target=process_ai_request, daemon=True).start()

def handle_update(update):
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    message = update.get("message")
    if not message:
        return

    chat_id = message["chat"]["id"]
    text = message.get("text", "").strip()
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text[:50]}...")

    if text == "/start":
        MessageHandler.handle_start_command(chat_id)
    elif text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        MessageHandler.handle_reset_command(chat_id)
    elif MessageHandler.handle_menu_commands(chat_id, text):
        pass  # –ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    elif text:  # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è AI
        MessageHandler.handle_ai_conversation(chat_id, text)

# Flask –º–∞—Ä—à—Ä—É—Ç—ã
@app.route("/", methods=["GET"])
def health_check():
    """Health check –¥–ª—è Render"""
    return jsonify({
        "status": "healthy",
        "service": "EmpathAI Bot",
        "timestamp": int(time.time()),
        "config_valid": validate_config()
    })

@app.route("/webhook", methods=["POST"])
def webhook():
    """Webhook endpoint –¥–ª—è Telegram"""
    try:
        update = request.get_json()
        if not update:
            logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π JSON")
            return jsonify({"error": "Invalid JSON"}), 400
            
        handle_update(update)
        return jsonify({"status": "ok"})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ webhook: {e}")
        return jsonify({"error": "Internal server error"}), 500

@app.route("/set_webhook", methods=["POST"])
def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    try:
        data = request.get_json()
        webhook_url = data.get("url") if data else None
        
        if not webhook_url:
            return jsonify({"error": "URL not provided"}), 400
            
        url = f"https://api.telegram.org/bot{Config.TELEGRAM_BOT_TOKEN}/setWebhook"
        response = requests.post(url, json={"url": webhook_url}, timeout=10)
        
        return jsonify(response.json())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
        return jsonify({"error": str(e)}), 500

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ EmpathAI Bot...")
    
    if not validate_config():
        logger.error("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        sys.exit(1)
    
    logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞. –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    
    # –î–ª—è Render –∏—Å–ø–æ–ª—å–∑—É–µ–º PORT –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)
