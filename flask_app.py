import os
import json
import asyncio
from datetime import datetime, timedelta
from flask import Flask, request
from telebot import types
import telebot

from utils import load_text, load_user_data, save_user_data

# Flask app
app = Flask(__name__)

# Telegram Bot Init
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = telebot.TeleBot(TOKEN)

# Constants
FREE_TRIAL_DAYS = 7
DAILY_MESSAGE_LIMIT = 15

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É")
    keyboard.row("‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ", "üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ")
    keyboard.row("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥")
    keyboard.row("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
    return keyboard

def get_keyboard_for_user(is_new_user):
    keyboard = get_main_menu()
    if is_new_user:
        keyboard.row("üÜì –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
    return keyboard

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async def handle_update(update):
    message = update.message
    if not message or not message.text:
        return

    chat_id = message.chat.id
    user_id = str(chat_id)
    message_text = message.text.strip()

    user_data = load_user_data(user_id)
    is_new_user = not user_data

    keyboard = get_keyboard_for_user(is_new_user)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if message_text == "/start" or message_text == "üÜì –ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥":
        user_data = {
            "start_date": datetime.utcnow().isoformat(),
            "messages_sent": 0
        }
        save_user_data(user_id, user_data)
        reply = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EmpathAI ‚Äî —Ç–≤–æ–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã.\n\n"
            "üß† –Ø –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ.\n"
            "–ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é."
        )
    elif message_text == "üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
        reply = load_text("support")
    elif message_text == "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É":
        reply = load_text("faq")
    elif message_text == "‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ":
        reply = load_text("info")
    elif message_text == "üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ":
        reply = load_text("rules")
    elif message_text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        save_user_data(user_id, {})
        reply = load_text("reset")
    elif message_text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        reply = "üí≥ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—è–≤—è—Ç—Å—è —Å–∫–æ—Ä–æ. –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
    else:
        reply = "ü§ñ –Ø —Ç–µ–±—è —Å–ª—É—à–∞—é. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é."

    await asyncio.to_thread(bot.send_message, chat_id, reply, reply_markup=keyboard)

# Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞
@app.route("/webhook", methods=["POST"])
def webhook():
    update = types.Update.de_json(request.get_json(force=True))
    asyncio.run(handle_update(update))
    return "OK", 200

# –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –Ω–∞ Render
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
