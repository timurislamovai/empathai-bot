import os
import time
import json
import requests
from flask import Flask, request
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return {
        "keyboard": [
            [{"text": "üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"}, {"text": "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É"}],
            [{"text": "‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ"}, {"text": "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"}],
            [{"text": "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"}]
        ],
        "resize_keyboard": True
    }

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_message(chat_id, text, reply_markup=None):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text
    }
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)

    response = requests.post(url, json=payload)
    if response.status_code != 200:
        print(f"[ERROR] Telegram send failed: {response.status_code} {response.text}")

# Webhook
@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        update = request.get_json()
        print("Received update:", json.dumps(update, indent=2, ensure_ascii=False))
        handle_update(update)
        return "OK"
    except Exception as e:
        print(f"[ERROR] Webhook exception: {e}")
        return "Internal Server Error", 500

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
def handle_update(update):
    message = update.get("message")
    if not message:
        return

    chat_id = message["chat"]["id"]
    text = message.get("text", "").strip()

    if text == "/start":
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EmpathAI!\n\n"
            "–Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è –∏ —Å–Ω–∏–∂–µ–Ω–∏—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏.\n\n"
            "üìã –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ."
        )
        send_message(chat_id, welcome_text, reply_markup=main_menu())
        return

    if text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        send_message(chat_id, "–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ?", reply_markup=main_menu())
        return

    if text in ["üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É", "‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ", "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"]:
        filename = {
            "üß† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": "support",
            "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É": "faq",
            "‚ÑπÔ∏è –û –°–µ—Ä–≤–∏—Å–µ": "info",
            "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": "rules"
        }.get(text, "faq")
        try:
            with open(f"texts/{filename}.txt", "r", encoding="utf-8") as f:
                content = f.read()
        except:
            content = "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
        send_message(chat_id, content, reply_markup=main_menu())
        return

    # GPT-–æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Assistant API
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "OpenAI-Beta": "assistants=v2",
        "Content-Type": "application/json"
    }

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π thread
    thread_res = requests.post("https://api.openai.com/v1/threads", headers=headers)
    if thread_res.status_code != 200:
        send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏.", reply_markup=main_menu())
        return

    thread_id = thread_res.json()["id"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg_payload = {
        "role": "user",
        "content": text
    }
    requests.post(
        f"https://api.openai.com/v1/threads/{thread_id}/messages",
        headers=headers,
        json=msg_payload
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º Run
    run_payload = {
        "assistant_id": ASSISTANT_ID
    }
    run_res = requests.post(
        f"https://api.openai.com/v1/threads/{thread_id}/runs",
        headers=headers,
        json=run_payload
    )

    if run_res.status_code != 200:
        send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ AI-—Å–µ—Å—Å–∏–∏.", reply_markup=main_menu())
        return

    run_id = run_res.json()["id"]

    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è run
    for _ in range(30):
        time.sleep(1)
        check = requests.get(
            f"https://api.openai.com/v1/threads/{thread_id}/runs/{run_id}",
            headers=headers
        )
        status = check.json().get("status")
        if status == "completed":
            break
    else:
        send_message(chat_id, "‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.", reply_markup=main_menu())
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    messages_res = requests.get(
        f"https://api.openai.com/v1/threads/{thread_id}/messages",
        headers=headers
    )

    if messages_res.status_code != 200:
        send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.", reply_markup=main_menu())
        return

    messages = messages_res.json().get("data", [])
    for msg in reversed(messages):
        if msg["role"] == "assistant":
            response_text = msg["content"][0]["text"]["value"]
            send_message(chat_id, response_text, reply_markup=main_menu())
            return

    send_message(chat_id, "ü§ñ –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu())
