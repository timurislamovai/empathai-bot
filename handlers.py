import os
import requests
from diagnostics import contains_crisis_words
from datetime import datetime  # –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
from models import User
from filters import classify_crisis_level, log_crisis_message
from referral import generate_cabinet_message, generate_withdraw_info
from telegram import Bot, ReplyKeyboardMarkup, KeyboardButton
from utils import clean_markdown
from fastapi import Request
from database import SessionLocal
from models import (
    get_user_by_telegram_id,
    create_user,
    update_user_thread_id,
    increment_message_count,
    reset_user_thread
)
from openai_api import send_message_to_assistant

# üëá –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def subscription_plan_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üóì 1 –º–µ—Å—è—Ü"), KeyboardButton("üìÖ 1 –≥–æ–¥")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

# ‚úÖ Telegram ID –∞–¥–º–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /admin_stats
ADMIN_IDS = ["944583273", "396497806"]  # üîÅ –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞

bot = Bot(token=os.environ["TELEGRAM_TOKEN"])
FREE_MESSAGES_LIMIT = int(os.environ.get("FREE_MESSAGES_LIMIT", 50))


def main_menu():
    buttons = [
        [KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
        [KeyboardButton("üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"), KeyboardButton("‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É")],
        [KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"), KeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")],
        [KeyboardButton("ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)



async def handle_update(update: dict):
    print("üëâ START handle_update")
    print("üì¶ update:", update)

    db = SessionLocal()
    try:
        if "callback_query" in update:
            query = update["callback_query"]
            data = query["data"]
            chat_id = query["message"]["chat"]["id"]
            telegram_id = str(query["from"]["id"])

            if data == "withdraw_request":
                user = get_user_by_telegram_id(db, telegram_id)
                if not user:
                    bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                message_text, markup = generate_withdraw_info(user, telegram_id)
                bot.send_message(chat_id, message_text, reply_markup=markup)
                return

        message = update.get("message")
        if message:
            text = message.get("text", "")
            chat_id = message["chat"]["id"]
            telegram_id = str(message["from"]["id"])  # ‚úÖ —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∑–∞—Ä–∞–Ω–µ–µ
            user = get_user_by_telegram_id(db, telegram_id)

            # üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
            if "1 –º–µ—Å—è—Ü" in text:
                plan = "monthly"
            elif "1 –≥–æ–¥" in text:
                plan = "yearly"
            else:
                plan = None
        
            if plan:
                invoice_id = int(time.time())
                payment_url = generate_payment_url(telegram_id, invoice_id, plan)
                bot.send_message(chat_id, f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_url}")
                return
        
            # üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥
            if text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
                bot.send_message(chat_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
                return
        
            # üîÅ –ö–Ω–æ–ø–∫–∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
            if text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
                print("üëâ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
                text = (
                    "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ EmpathAI\n\n"
                    "üóì 1 –º–µ—Å—è—Ü: ~~1 800 ‚ÇΩ~~ ‚Üí 1 199 ‚ÇΩ\n"
                    "üìÖ 1 –≥–æ–¥: ~~14 400 ‚ÇΩ~~ ‚Üí 11 999 ‚ÇΩ\n\n"
                    "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:"
                )
                bot.send_message(chat_id, text, reply_markup=subscription_plan_keyboard(), parse_mode="Markdown")
                return


            # üîí –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Ä–æ–≤–Ω—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∞–∫—Ü–∏—è
            crisis_level = classify_crisis_level(text)
            
            if crisis_level in ["high", "medium", "low"]:
                log_crisis_message(telegram_id, text, level=crisis_level)
            
                if crisis_level == "high":
                    bot.send_message(chat_id, (
                        "–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å —Ç–∞–∫–∏–µ —Ç—è–∂—ë–ª—ã–µ —á—É–≤—Å—Ç–≤–∞.\n\n"
                        "–ï—Å–ª–∏ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ –∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –º—ã—Å–ª–∏ –Ω–∞–≤—Ä–µ–¥–∏—Ç—å —Å–µ–±–µ ‚Äî –≤–∞–∂–Ω–æ –Ω–µ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å —ç—Ç–∏–º –Ω–∞–µ–¥–∏–Ω–µ. "
                        "–û–±—Ä–∞—Ç–∏—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –∏–ª–∏ –∫—Ä–∏–∑–∏—Å–Ω–æ–π —Å–ª—É–∂–±–µ. üíô\n\n"
                        "–Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ. –¢—ã –Ω–µ –æ–¥–∏–Ω(–æ–¥–Ω–∞)."
                    ))
                    return

            if text.startswith("/give_unlimited"):
                if telegram_id not in ADMIN_IDS:
                    bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                    return
        
                parts = text.strip().split()
                if len(parts) != 2:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_unlimited <telegram_id>")
                    return
        
                target_id = parts[1]
                target_user = get_user_by_telegram_id(db, target_id)
                if target_user:
                    target_user.is_unlimited = True
                    db.commit()
                    bot.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –≤—ã–¥–∞–Ω –±–µ–∑–ª–∏–º–∏—Ç.")
                else:
                    bot.send_message(chat_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return


            if text in ["üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "üë• –ö–∞–±–∏–Ω–µ—Ç", "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"]:
                user = get_user_by_telegram_id(db, telegram_id)
                if not user:
                    bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                message_text, markup = generate_cabinet_message(user, telegram_id, db)
                bot.send_message(chat_id, message_text, reply_markup=main_menu())
                return

            # --- –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç ---
            ref_code = None
            if text.startswith("/start"):
                parts = text.split(" ", 1)
                if len(parts) > 1:
                    ref_code = parts[1].strip()
                    print(f"‚ö° –°—Ç–∞—Ä—Ç —Å —Ä–µ—Ñ–∫–æ–¥–æ–º: {ref_code}")

                if not user:
                    print(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. Telegram ID: {telegram_id}, —Ä–µ—Ñ–∫–æ–¥: {ref_code}")
                    user = create_user(db, telegram_id, referrer_code=ref_code)
                    BONUS_AMOUNT = 100.0
                    if ref_code:
                        inviter = db.query(User).filter(User.telegram_id == ref_code).first()
                        if inviter:
                            inviter.balance += BONUS_AMOUNT
                            inviter.total_earned += BONUS_AMOUNT
                            db.commit()
                            print(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {BONUS_AMOUNT} –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É: {ref_code}")

                bot.send_message(
                    chat_id,
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                    "–ü—Ä–∏–≤–µ—Ç, —è –ò–ª–∞ ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é.\n\n"
                    "üÜì –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 50 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
                    "üí≥ –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n\n"
                    "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
                    reply_markup=main_menu()
                )
                return

            # --- –ö–æ–º–∞–Ω–¥—ã ---
            if text == "/admin_stats" and user.telegram_id in ADMIN_IDS:
                from utils import get_stats_summary
                stats = get_stats_summary(db)
                bot.send_message(chat_id, stats)
                return

            if text == "/admin_referrals" and user.telegram_id in ADMIN_IDS:
                from admin_commands import handle_admin_stats
                handle_admin_stats(db, chat_id, bot)
                return

            if text in ["üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "üë• –ö–∞–±–∏–Ω–µ—Ç", "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"]:
                message_text, markup = generate_cabinet_message(user, telegram_id, db)
                bot.send_message(chat_id, message_text, reply_markup=markup)
                return

            if text == "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞":
                message_text, markup = generate_withdraw_info(user, telegram_id)
                bot.send_message(chat_id, message_text, reply_markup=main_menu())
                return

            if text in ["üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É"]:
                filename = {
                    "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É": "subscribe.txt",
                    "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É": "guide.txt",
                    "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": "rules.txt"
                }[text]
                try:
                    with open(f"texts/{filename}", "r", encoding="utf-8") as f:
                        response = f.read()
                except FileNotFoundError:
                    response = "–§–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."
                bot.send_message(chat_id, response, reply_markup=main_menu())
                return

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ ---
            if not user.is_unlimited:
                if user.free_messages_used >= FREE_MESSAGES_LIMIT:
                    bot.send_message(
                        chat_id,
                        "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
                        reply_markup=main_menu()
                    )
                    return


            # --- Assistant API (OpenAI) ---
            try:
                assistant_response, thread_id = send_message_to_assistant(user.thread_id, text)
            except Exception as e:
                if "run is active" in str(e):
                    print("‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π run –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –°–±—Ä–∞—Å—ã–≤–∞—é thread.")
                    user.thread_id = None
                    db.commit()
                    assistant_response, thread_id = send_message_to_assistant(None, text)
                else:
                    raise e

            if not user.thread_id:
                update_user_thread_id(db, user, thread_id)

            increment_message_count(db, user)
            assistant_response = clean_markdown(assistant_response)
            bot.send_message(chat_id, assistant_response, reply_markup=main_menu())

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ handle_update:", e)
    finally:
        db.close()
