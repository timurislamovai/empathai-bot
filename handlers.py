import os
import requests
from models import User
from referral import generate_cabinet_message, generate_withdraw_info
from telegram import Bot, ReplyKeyboardMarkup, KeyboardButton
from utils import clean_markdown
from fastapi import Request
from database import SessionLocal
from models import (
    get_user_by_telegram_id,
    create_user,
    update_user_thread_id,
    increment_message_count,
    reset_user_thread
)
from openai_api import send_message_to_assistant

# ‚úÖ Telegram ID –∞–¥–º–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /admin_stats
ADMIN_IDS = ["944583273", "396497806"]  # üîÅ –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞

bot = Bot(token=os.environ["TELEGRAM_TOKEN"])
FREE_MESSAGES_LIMIT = int(os.environ.get("FREE_MESSAGES_LIMIT", 50))


def main_menu():
    buttons = [
        [KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
        [KeyboardButton("üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"), KeyboardButton("‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É")],
        [KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"), KeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)


async def handle_update(update: dict):
    print("üëâ START handle_update")
    print("‚úÖ Webhook –ø–æ–ª—É—á–µ–Ω –æ—Ç Telegram")
    print("üì¶ update:", update)

    db = SessionLocal()
    try:
        # === 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ (callback_query) ===
        if "callback_query" in update:
                query = update["callback_query"]
                data = query["data"]
                chat_id = query["message"]["chat"]["id"]
                telegram_id = str(query["from"]["id"])

        if data == "withdraw_request":
            if data == "withdraw_request":
                print("üíµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥")
                user = get_user_by_telegram_id(db, telegram_id)
            if user is None:
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
        
            message_text, markup = generate_withdraw_info(user, telegram_id)
            bot.send_message(chat_id, message_text, reply_markup=markup)
            return


        # === 2. –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ) ===
        message = update.get("message")
        if message:
            print("üì© –ü–æ–ª—É—á–µ–Ω–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            text = message.get("text", "")
            chat_id = message["chat"]["id"]
            telegram_id = str(message["from"]["id"])
            user = get_user_by_telegram_id(db, telegram_id)
        
            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º ---
            ref_code = None  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ—Ç
            if text.startswith("/start"):
                parts = text.split(" ", 1)
                if len(parts) > 1:
                    ref_code = parts[1].strip()
                print(f"‚ö° –°—Ç–∞—Ä—Ç —Å —Ä–µ—Ñ–∫–æ–¥–æ–º: {ref_code}")
        
            # --- –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ---
            if text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
                message_text, markup = generate_cabinet_message(user, telegram_id, db)
                bot.send_message(chat_id, message_text, reply_markup=markup)
                return
        
            # --- –ó–∞–≥–ª—É—à–∫–∞: –≤ –±—É–¥—É—â–µ–º ‚Äî Assistant API ---
            # from openai_api import assistant_api_reply
            # assistant_response = assistant_api_reply(user, text)
            # bot.send_message(chat_id, assistant_response)
            return



    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ handle_update:", e)
    finally:
        db.close()



        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ---
            ref_code = None  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if text.startswith("/start"):  # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–æ–º–∞–Ω–¥—ã /start
                parts = text.split(" ", 1)  # —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª—É –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if len(parts) > 1:
                    ref_code = parts[1].strip()  # –±–µ—Ä–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ—Å–ª–µ /start –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
            user = get_user_by_telegram_id(db, telegram_id)
            if not user:
                print(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. Telegram ID: {telegram_id}, —Ä–µ—Ñ–∫–æ–¥: {ref_code}")
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
            user = create_user(db, telegram_id, referrer_code=ref_code)

            # === –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É ===
            BONUS_AMOUNT = 100.0  # –ü–æ–∫–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
            if ref_code:
                inviter = db.query(User).filter(User.telegram_id == ref_code).first()
                if inviter:
                    inviter.balance += BONUS_AMOUNT
                    inviter.total_earned += BONUS_AMOUNT
                    db.commit()
                    print(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {BONUS_AMOUNT} –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É: {ref_code}")


            
        # === üë®‚Äçüíª –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin_stats (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) ===
        if text == "/admin_stats":
            if user.telegram_id not in ADMIN_IDS:
                bot.send_message(chat_id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            else:
                from utils import get_stats_summary
                stats = get_stats_summary(db)
                bot.send_message(chat_id, stats)
            return
            
        # üîê –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin_referrals (–¢–û–ü 10 –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏—Ö)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        elif text == "/admin_referrals":
            if user.telegram_id not in ADMIN_IDS:
                bot.send_message(chat_id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            else:
                from admin_commands import handle_admin_stats  # –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                handle_admin_stats(db, chat_id, bot)  # –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            return

        if text == "/start":
            bot.send_message(
                chat_id,
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
                "–ü—Ä–∏–≤–µ—Ç, —è –ò–ª–∞ ‚Äî —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ —Å–µ–±—è –∏ –ø–æ–∏—Å–∫–µ –¥—É—à–µ–≤–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è.\n\n"
                "üÜì –ù–∞ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 50 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
                "üí≥ –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n\n"
                "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.",
                reply_markup=main_menu()
            )
            return


        if text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥":
            reset_user_thread(db, user)
            bot.send_message(chat_id, "–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ üåÄ", reply_markup=main_menu())
            return

        if text in ["üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É"]:
            filename = {
                "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É": "subscribe.txt",
                "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É": "guide.txt",
                "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": "rules.txt"
            }[text]

            try:
                with open(f"texts/{filename}", "r", encoding="utf-8") as f:
                    response = f.read()
            except FileNotFoundError:
                response = "–§–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."
            bot.send_message(chat_id, response, reply_markup=main_menu())
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        if user.free_messages_used >= FREE_MESSAGES_LIMIT:
            bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.", reply_markup=main_menu())
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT (Assistant API)
        try:
            assistant_response, thread_id = send_message_to_assistant(user.thread_id, text)
        except Exception as e:
            if "run is active" in str(e):
                print("‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π run –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –°–±—Ä–∞—Å—ã–≤–∞—é thread.")
                user.thread_id = None
                db.commit()
                assistant_response, thread_id = send_message_to_assistant(None, text)
            else:
                raise e


        if not user.thread_id:
            update_user_thread_id(db, user, thread_id)
        
        # ‚úÖ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
        increment_message_count(db, user)
        
        assistant_response = clean_markdown(assistant_response)
        bot.send_message(chat_id, assistant_response, reply_markup=main_menu())


   
