import os
import requests
from models import User
from referral import generate_cabinet_message, generate_withdraw_info
from telegram import Bot, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from utils import clean_markdown
from fastapi import Request
from database import SessionLocal
from models import (
    get_user_by_telegram_id,
    create_user,
    update_user_thread_id,
    increment_message_count,
    reset_user_thread
)
from openai_api import send_message_to_assistant

# ‚úÖ Telegram ID –∞–¥–º–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /admin_stats
ADMIN_IDS = ["944583273", "396497806"]

bot = Bot(token=os.environ["TELEGRAM_TOKEN"])
FREE_MESSAGES_LIMIT = int(os.environ.get("FREE_MESSAGES_LIMIT", 50))

def main_menu():
    buttons = [
        [KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
        [KeyboardButton("üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"), KeyboardButton("‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É")],
        [KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"), KeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")],
        [KeyboardButton("ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

async def handle_update(update: dict):
    print("üëâ START handle_update")
    print("üì¶ update:", update)

    db = SessionLocal()
    try:
        if "callback_query" in update:
            query = update["callback_query"]
            data = query["data"]
            chat_id = query["message"]["chat"]["id"]
            telegram_id = str(query["from"]["id"])

            feedback_responses = {
                "feedback_good": "–†–∞–¥ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å! üòä",
                "feedback_neutral": "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–µ–ª–∏—à—å—Å—è. –Ø —Ä—è–¥–æ–º üôè",
                "feedback_bad": "–°–æ—á—É–≤—Å—Ç–≤—É—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±–µ—Ä–µ–≥–∏ —Å–µ–±—è. –Ø –∑–¥–µ—Å—å üíô"
            }

            if data in feedback_responses:
                bot.answer_callback_query(callback_query_id=query["id"])
                bot.send_message(chat_id, feedback_responses[data])
                return

            if data == "withdraw_request":
                user = get_user_by_telegram_id(db, telegram_id)
                if not user:
                    bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                message_text, markup = generate_withdraw_info(user, telegram_id)
                bot.send_message(chat_id, message_text, reply_markup=markup)
                return

        message = update.get("message")
        if message:
            text = message.get("text", "")
            chat_id = message["chat"]["id"]
            telegram_id = str(message["from"]["id"])
            user = get_user_by_telegram_id(db, telegram_id)

            if not user:
                user = create_user(db, telegram_id)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
            if text == "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É":
                try:
                    with open("texts/guide.txt", "r", encoding="utf-8") as f:
                        bot.send_message(chat_id, f.read())
                except:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ì–∏–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return

            elif text == "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è":
                try:
                    with open("texts/rules.txt", "r", encoding="utf-8") as f:
                        bot.send_message(chat_id, f.read())
                except:
                    bot.send_message(chat_id, "‚ö†Ô∏è –£—Å–ª–æ–≤–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
                return

            elif text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
                message_text = generate_cabinet_message(user, telegram_id, db)
                bot.send_message(chat_id, message_text)
                return

            elif text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥":
                reset_user_thread(db, user)
                update_user_thread_id(db, user, None)
                bot.send_message(chat_id, "üß† –î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –¢—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.")
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if text.startswith("/give_unlimited"):
                if telegram_id not in ADMIN_IDS:
                    bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                    return
                parts = text.strip().split()
                if len(parts) != 2:
                    bot.send_message(chat_id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_unlimited <telegram_id>")
                    return
                target_id = parts[1]
                target_user = get_user_by_telegram_id(db, target_id)
                if target_user:
                    target_user.is_unlimited = True
                    db.commit()
                    bot.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –≤—ã–¥–∞–Ω –±–µ–∑–ª–∏–º–∏—Ç.")
                    return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏–∑–∏—Å–Ω—ã–µ —Å–ª–æ–≤–∞
            from diagnostics import diagnose_topic, contains_crisis_words
            if contains_crisis_words(text):
                bot.send_message(chat_id, "–ü–æ—Ö–æ–∂–µ, —Ç—ã –ø–µ—Ä–µ–∂–∏–≤–∞–µ—à—å –Ω–µ–ø—Ä–æ—Å—Ç–æ–π –º–æ–º–µ–Ω—Ç. "
                                          "–ï—Å–ª–∏ —Ç–µ–±–µ —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –æ–±—Ä–∞—Ç–∏—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
                return

            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–µ–º—ã
            diagnosed_question = diagnose_topic(text)
            if diagnosed_question:
                bot.send_message(chat_id, diagnosed_question)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Assistant API
            try:
                response, thread_id = send_message_to_assistant(user.thread_id, text)
                if not user.thread_id:
                    update_user_thread_id(db, user, thread_id)
            except Exception as e:
                if "run is already active" in str(e).lower():
                    update_user_thread_id(db, user, None)
                    response, thread_id = send_message_to_assistant(None, text)
                else:
                    raise e

            increment_message_count(db, user)
            user = get_user_by_telegram_id(db, telegram_id)

            response = clean_markdown(response)
            bot.send_message(chat_id, response, reply_markup=main_menu())

            if user.total_messages % 5 == 0:
                feedback_question = "–ö–∞–∫ —Ç—ã —Å–µ–±—è —Å–µ–π—á–∞—Å —á—É–≤—Å—Ç–≤—É–µ—à—å?"
                feedback_keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üòä –•–æ—Ä–æ—à–æ", callback_data="feedback_good")],
                    [InlineKeyboardButton("üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ", callback_data="feedback_neutral")],
                    [InlineKeyboardButton("üò¢ –ü–ª–æ—Ö–æ", callback_data="feedback_bad")]
                ])
                bot.send_message(chat_id, feedback_question, reply_markup=feedback_keyboard)

    finally:
        db.close()
