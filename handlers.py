import os
import requests
from telegram import Bot, ReplyKeyboardMarkup, KeyboardButton
from fastapi import Request
from database import SessionLocal
from models import (
    get_user_by_telegram_id,
    create_user,
    update_user_thread_id,
    increment_message_count,
    reset_user_thread
)
from openai_api import send_message_to_assistant

bot = Bot(token=os.environ["TELEGRAM_TOKEN"])
FREE_MESSAGES_LIMIT = int(os.environ.get("FREE_MESSAGES_LIMIT", 50))


def main_menu():
    buttons = [
        [KeyboardButton("‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É")],
        [KeyboardButton("üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"), KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
        [KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"), KeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")]
    ]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)


async def handle_update(update: dict):
    print("‚úÖ Webhook –ø–æ–ª—É—á–µ–Ω –æ—Ç Telegram")
    print("üì¶ update:", update)

    db = SessionLocal()
    try:
        message = update.get("message")
        if not message:
            print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—è 'message'")
            return

        telegram_id = str(message["from"]["id"])
        text = message.get("text", "")
        chat_id = message["chat"]["id"]

        user = get_user_by_telegram_id(db, telegram_id)
        if not user:
            user = create_user(db, telegram_id)

        if text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥":
            reset_user_thread(db, user)
            bot.send_message(chat_id, "–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ üåÄ", reply_markup=main_menu())
            return

        if text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
            remaining = max(0, FREE_MESSAGES_LIMIT - user.free_messages_used)
            bot.send_message(
                chat_id,
                f"üßæ –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {user.free_messages_used} –∏–∑ {FREE_MESSAGES_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π.\n–û—Å—Ç–∞–ª–æ—Å—å: {remaining}",
                reply_markup=main_menu()
            )
            return

        if text in ["‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É", "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"]:
            filename = {
                ""‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É": "faq.txt",
                "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": "rules.txt",
                "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É": "subscribe.txt"
            }[text]
            try:
                with open(f"texts/{filename}", "r", encoding="utf-8") as f:
                    response = f.read()
            except FileNotFoundError:
                response = "–§–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."
            bot.send_message(chat_id, response, reply_markup=main_menu())
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        if user.free_messages_used >= FREE_MESSAGES_LIMIT:
            bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.", reply_markup=main_menu())
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT (Assistant API)
        assistant_response, thread_id = send_message_to_assistant(user.thread_id, text)

        if not user.thread_id:
            update_user_thread_id(db, user, thread_id)

        increment_message_count(db, user)

        bot.send_message(chat_id, assistant_response, reply_markup=main_menu())

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ handle_update:", e)

    finally:
        db.close()
