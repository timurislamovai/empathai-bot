from aiogram import types, Router, F
from aiogram.filters import Command
from sqlalchemy import func
from database import SessionLocal
from models import get_user_by_telegram_id, create_user, User
from datetime import datetime

router = Router()

MIN_PAYOUT_AMOUNT = 5000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã

ADMIN_IDS = ["944583273", "396497806"]

@router.message(Command("admin_user"))
async def handle_admin_user(message: types.Message):
    if str(message.from_user.id) not in ADMIN_IDS:
        return await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    parts = message.text.strip().split()
    if len(parts) < 2:
        return await message.answer("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin_user <telegram_id>")

    telegram_id = parts[1].strip()

    db = SessionLocal()
    user = get_user_by_telegram_id(db, telegram_id)
    if not user:
        return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # üë• –ü–æ–¥—Å—á—ë—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö
    invited_count = db.query(User).filter(User.referrer_code == str(telegram_id)).count()

    earned = round(user.referral_earned or 0.0, 2)
    paid = round(user.referral_paid or 0.0, 2)
    to_pay = round(earned - paid, 2)

    text = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (Telegram ID): {telegram_id}\n\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invited_count} —á–µ–ª.\n"
        f"üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {earned} ‚ÇΩ\n"
        f"üí≥ –í—ã–ø–ª–∞—á–µ–Ω–æ: {paid} ‚ÇΩ\n"
        f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –∫ –≤—ã–ø–ª–∞—Ç–µ: {to_pay} ‚ÇΩ\n"
    )

    if to_pay >= MIN_PAYOUT_AMOUNT:
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text=f"‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–ª–∞—á–µ–Ω–æ {to_pay} ‚ÇΩ",
                callback_data=f"confirm_payout:{telegram_id}:{to_pay}"
            )]
        ])
        await message.answer(text, reply_markup=keyboard)
    else:
        text += f"\n‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã (–º–∏–Ω–∏–º—É–º {MIN_PAYOUT_AMOUNT} ‚ÇΩ)"
        await message.answer(text)



# üìä /admin_stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.message(Command("admin_stats"))
async def admin_stats(message: types.Message):
    telegram_id = str(message.from_user.id)
    if telegram_id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    db = SessionLocal()
    total_users = db.query(User).count()
    paid_users = db.query(User).filter(User.has_paid == True).count()
    unlimited_users = db.query(User).filter(User.is_unlimited == True).count()

    await message.answer(
        f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üí≥ –° –ø–æ–¥–ø–∏—Å–∫–æ–π: {paid_users}\n"
        f"‚ôæ –ë–µ–∑–ª–∏–º–∏—Ç: {unlimited_users}"
    )

# ü§ù /admin_referrals ‚Äî —Ç–æ–ø-—Ä–µ—Ñ–µ—Ä–∞–ª—ã
@router.message(Command("admin_referrals"))
async def admin_referrals(message: types.Message):
    telegram_id = str(message.from_user.id)
    if telegram_id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    db = SessionLocal()
    top_referrers = (
        db.query(User.referrer_code, func.count(User.id).label("ref_count"))
        .filter(User.referrer_code.isnot(None))
        .group_by(User.referrer_code)
        .order_by(func.count(User.id).desc())
        .limit(10)
        .all()
    )

    total_referrals = db.query(User).filter(User.referrer_code.isnot(None)).count()
    unique_referrers = db.query(User.referrer_code).distinct().count()

    message_text = "üìä –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¢–û–ü 10):\n"
    for i, (ref_code, count) in enumerate(top_referrers, start=1):
        message_text += f"{i}. {ref_code} ‚Äî {count} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö\n"

    message_text += f"\nüî¢ –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö: {total_referrals}"
    message_text += f"\nüí∏ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤: {unique_referrers}"

    await message.answer(message_text)

# ‚ôæ /give_unlimited <id> ‚Äî –≤—ã–¥–∞—Ç—å –±–µ–∑–ª–∏–º–∏—Ç
@router.message(Command("give_unlimited"))
async def give_unlimited(message: types.Message):
    telegram_id = str(message.from_user.id)
    if telegram_id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    parts = message.text.strip().split()
    if len(parts) != 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_unlimited <telegram_id>")
        return

    target_id = parts[1]
    db = SessionLocal()
    target_user = get_user_by_telegram_id(db, target_id)

    if not target_user:
        target_user = create_user(db, target_id)

    target_user.is_unlimited = True
    db.commit()

    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –≤—ã–¥–∞–Ω –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø.")


@router.callback_query(F.data.startswith("confirm_payout:"))
async def confirm_referral_payout(callback: types.CallbackQuery):
    parts = callback.data.split(":")
    if len(parts) != 3:
        return await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏.")

    telegram_id = parts[1]
    payout_amount = float(parts[2])

    db = SessionLocal()
    user = get_user_by_telegram_id(db, telegram_id)
    if not user:
        return await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    earned = round(user.referral_earned or 0.0, 2)
    paid = round(user.referral_paid or 0.0, 2)
    to_pay = round(earned - paid, 2)

    if payout_amount > to_pay:
        return await callback.message.answer("‚ö†Ô∏è –°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫.")

    user.referral_paid = paid + payout_amount
    db.commit()

    username_display = getattr(user, "username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
    await callback.message.answer(
        f"‚úÖ –í—ã–ø–ª–∞—Ç–∞ {payout_amount} ‚ÇΩ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username_display} –æ—Ç–º–µ—á–µ–Ω–∞.\n"
        f"–ù–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {new_balance} ‚ÇΩ"
    )

    await callback.answer()



@router.message(Command("delete_user"))
async def delete_user_handler(message: types.Message):
    db = SessionLocal()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if str(message.from_user.id) not in ADMIN_IDS:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    args = message.text.strip().split()
    if len(args) != 2 or not args[1].isdigit():
        return await message.answer("‚ö† –£–∫–∞–∂–∏—Ç–µ Telegram ID: /delete_user 123456789")

    telegram_id = args[1]
    user = get_user_by_telegram_id(db, telegram_id)

    if not user:
        return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã
    db.delete(user)
    db.commit()

    # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
    log_entry = f"[{datetime.utcnow()}] üóë –£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∞–¥–º–∏–Ω–æ–º {message.from_user.id}\n"
    with open("deleted_users.log", "a", encoding="utf-8") as f:
        f.write(log_entry)

    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã.")
