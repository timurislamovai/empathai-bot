from aiogram import types, F
from aiogram.filters import Command
from bot_instance import dp, bot
from models import get_user_by_telegram_id, create_user
from ui import main_menu, subscription_plan_keyboard
from database import SessionLocal
from openai_api import reset_user_thread
from referral import generate_cabinet_message
from cloudpayments import generate_payment_link  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
import os
from aiogram import Router

router = Router()

# üöÄ –°—Ç–∞—Ä—Ç –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ref-–∫–æ–¥–æ–º
@router.message(Command("start"))
async def handle_start(message: types.Message):
    chat_id = message.chat.id
    telegram_id = str(message.from_user.id)
    text = message.text

    db = SessionLocal()
    user = get_user_by_telegram_id(db, telegram_id)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ—Ñ-–∫–æ–¥
    ref_code = None
    parts = text.strip().split(" ", 1)
    if len(parts) > 1:
        ref_code = parts[1].strip()
        if ref_code.startswith("ref"):
            ref_code = ref_code.replace("ref", "", 1)
        if not ref_code.isdigit():
            ref_code = None

    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º
    if not user:
        user = create_user(db, telegram_id, referrer_code=ref_code)
        print(f"[üë§] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –ø–æ —Ä–µ—Ñ. –∫–æ–¥—É: {ref_code}")
    elif not user.referrer_code and ref_code:
        user.referrer_code = ref_code
        db.commit()
        print(f"[üîÅ] –†–µ—Ñ. –∫–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {ref_code}")

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–ü—Ä–∏–≤–µ—Ç, —è –ò–ª–∞ ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é.\n\n"
        "üÜì –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 50 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        "üí≥ –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n\n"
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
        reply_markup=main_menu()
    )

# üìÇ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
@router.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def show_cabinet(message: types.Message):
    db = SessionLocal()
    telegram_id = str(message.from_user.id)
    user = get_user_by_telegram_id(db, telegram_id)

    text, markup = generate_cabinet_message(user, telegram_id, db)
    await message.answer(text, reply_markup=markup)

# üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
@router.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def show_subscription_options(message: types.Message):
    await message.answer(
        "üí° _–° –ò–ª–∞ AI –ë–æ—Ç —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –∫–∞–∫ –æ—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞._\n\n"
        "üîπ *1 –º–µ—Å—è—Ü*: 1 199 ‚ÇΩ ‚Äî –Ω–∞—á–Ω–∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤\n"
        "üîπ *1 –≥–æ–¥*: 11 999 ‚ÇΩ ‚Äî –≤—ã–≥–æ–¥–Ω–æ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –æ–ø–æ—Ä—É\n\n"
        "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=subscription_plan_keyboard(),
        parse_mode="Markdown"
    )

# üîó –û–ø–ª–∞—Ç–∞: 1 –º–µ—Å—è—Ü / 1 –≥–æ–¥
@router.message(F.text.in_(["üóì –ö—É–ø–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü", "üìÖ –ö—É–ø–∏—Ç—å –Ω–∞ 1 –≥–æ–¥"]))
async def show_payment_link(message: types.Message):
    plan = "monthly" if message.text == "üóì –ö—É–ø–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü" else "yearly"
    telegram_id = str(message.from_user.id)
    amount = 119900 if plan == "yearly" else 119900 // 12  # —Å—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö

    payment_url = generate_payment_link(telegram_id, plan, amount=amount)

    await message.answer(
        "üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)]
            ]
        )
    )

# üìú –£—Å–ª–æ–≤–∏—è + ‚ùì –ì–∏–¥
@router.message(F.text.in_(["üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É"]))
async def send_static_text(message: types.Message):
    filename = {
        "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É": "texts/guide.txt",
        "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": "texts/rules.txt"
    }.get(message.text)

    try:
        with open(filename, "r", encoding="utf-8") as f:
            content = f.read()
    except FileNotFoundError:
        content = "‚ö†Ô∏è –§–∞–π–ª –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."

    await message.answer(content, reply_markup=main_menu())

# üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥
@router.message(F.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def reset_dialog(message: types.Message):
    db = SessionLocal()
    user_id = str(message.from_user.id)
    user = get_user_by_telegram_id(db, user_id)
    reset_user_thread(db, user)

    await message.answer("üîÅ –î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.", reply_markup=main_menu())

# ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
@router.message(F.text == "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
async def send_partner_info(message: types.Message):
    try:
        with open("texts/partner.txt", "r", encoding="utf-8") as f:
            content = f.read()
    except FileNotFoundError:
        content = "‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞."

    await message.answer(content, reply_markup=main_menu())

# üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: types.Message):
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


from aiogram.filters import CommandStart
from database import SessionLocal
from models import get_user_by_telegram_id, create_user
from ui import main_menu

@router.message(CommandStart())
async def handle_start(message: types.Message):
    db = SessionLocal()
    telegram_id = str(message.from_user.id)

    user = get_user_by_telegram_id(db, telegram_id)
    if not user:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ. –∫–æ–¥ –≤ –∫–æ–º–∞–Ω–¥–µ
        ref_code = None
        parts = message.text.strip().split(" ", 1)
        if len(parts) > 1 and parts[1].startswith("ref"):
            ref_code = parts[1].replace("ref", "")
            if not ref_code.isdigit():
                ref_code = None

        user = create_user(db, int(telegram_id), referrer_code=ref_code)
        print(f"[üë§] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Å—Å—ã–ª–∫–µ ref: {ref_code}")
    else:
        print(f"[‚ÑπÔ∏è] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å: {telegram_id}")

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø ‚Äî –ò–ª–∞, —Ç–≤–æ–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫.\n\n–ß–µ–º –º–æ–≥—É –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è?",
        reply_markup=main_menu()
    )

