from aiogram import types, F, Router
from database import SessionLocal
from datetime import datetime
import os

from models import (
    get_user_by_telegram_id,
    increment_message_count,
    update_user_thread_id,
    create_user  # ‚Üê –¥–æ–±–∞–≤—å, –µ—Å–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª
)
from openai_api import send_message_to_assistant, reset_user_thread
from utils import clean_markdown
from filters import classify_crisis_level, log_crisis_message
from ui import main_menu

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è router
router = Router()

FREE_MESSAGES_LIMIT = int(os.environ.get("FREE_MESSAGES_LIMIT", 7))

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫–∏
@router.message(
    F.text 
    & ~F.text.in_([
        "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        "üóì –ö—É–ø–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü",
        "üìÖ –ö—É–ø–∏—Ç—å –Ω–∞ 1 –≥–æ–¥",
        "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
        "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É",
        "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥",
        "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
        "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    ])
    & ~F.text.startswith("/start")
)

async def handle_gpt_message(message: types.Message):
    db = SessionLocal()
    telegram_id = int(message.from_user.id)
    user = get_user_by_telegram_id(db, telegram_id)

    if not user:
        user = create_user(db, int(telegram_id))
        print(f"[üë§] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ GPT: {telegram_id}")

    # ‚è∞ –û–±–Ω–æ–≤–∏–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    user.last_message_at = datetime.utcnow()
    db.commit()

    text = message.text or ""

    # üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ (—Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏ / –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    if not user.is_unlimited:
        if user.has_paid:
            if user.subscription_expires_at and user.subscription_expires_at < datetime.utcnow():
                user.has_paid = False
                db.commit()
                await message.answer(
                    "üì≠ –°—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç—ë–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.",
                    reply_markup=main_menu()
                )
                return
        else:
            if user.free_messages_used >= FREE_MESSAGES_LIMIT:
                await message.answer(
                    "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
                    reply_markup=main_menu()
                )
                return

    # ‚ö†Ô∏è –ö—Ä–∏–∑–∏—Å–Ω—ã–µ —Å–ª–æ–≤–∞ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    crisis_level = classify_crisis_level(text)
    if crisis_level in ["high", "medium", "low"]:
        log_crisis_message(telegram_id, text, level=crisis_level)
        if crisis_level == "high":
            await message.answer(
                "–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å —Ç–∞–∫–∏–µ —Ç—è–∂—ë–ª—ã–µ —á—É–≤—Å—Ç–≤–∞.\n\n"
                "–ï—Å–ª–∏ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ –∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –º—ã—Å–ª–∏ –Ω–∞–≤—Ä–µ–¥–∏—Ç—å —Å–µ–±–µ ‚Äî –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –∏–ª–∏ –≤ –∫—Ä–∏–∑–∏—Å–Ω—É—é —Å–ª—É–∂–±—É. üíô\n\n"
                "–Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ. –¢—ã –Ω–µ –æ–¥–∏–Ω(–æ–¥–Ω–∞)."
            )
            return

    # === –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ ===
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ –∫—Ä–∏–∑–∏—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, —á—Ç–æ–±—ã –≤–∞–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ —Ç–µ—Ä—è–ª–∏—Å—å
    if not user.is_unlimited and not user.has_paid and len(text) > 400:
        await message.answer(
            "–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ 400 —Å–∏–º–≤–æ–ª–æ–≤. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=main_menu()
        )
        return
    # =============================================================

    # ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ OpenAI
    try:
        assistant_response, thread_id = send_message_to_assistant(
            user.thread_id,
            text,
            is_paid=user.has_paid,
            is_unlimited=user.is_unlimited
        )

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ GPT:", e)
        if "run is active" in str(e):
            user.thread_id = None
            db.commit()
            assistant_response, thread_id = send_message_to_assistant(
                None,
                text,
                is_paid=user.has_paid,
                is_unlimited=user.is_unlimited
            )
        else:
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            return


    if not user.thread_id:
        update_user_thread_id(db, user, thread_id)

    increment_message_count(db, user)

    assistant_response = clean_markdown(assistant_response)

    try:
        await message.answer(assistant_response, reply_markup=main_menu())
    except aiogram.exceptions.TelegramForbiddenError:
        print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")
    except aiogram.exceptions.TelegramBadRequest as e:
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        print(f"‚ö†Ô∏è TelegramBadRequest –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")


