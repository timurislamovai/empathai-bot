from aiogram import types, F
from bot_instance import dp, bot
from utils import clean_markdown
from ui import main_menu, subscription_plan_keyboard
from referral import generate_cabinet_message
from openai_api import send_message_to_assistant, reset_user_thread
from models import get_user_by_telegram_id, update_user_thread_id, increment_message_count
from database import SessionLocal
from filters import classify_crisis_level, log_crisis_message
from datetime import datetime
from cloudpayments import generate_payment_link 
import time
from aiogram import Router
router = Router()


FREE_MESSAGES_LIMIT = 20

@router.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def handle_buy(message: types.Message):
    await message.answer(
        "üí° _–° –ò–ª–∞ AI –ë–æ—Ç —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –∫–∞–∫ –æ—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞._\n\n"
        "üîπ *1 –º–µ—Å—è—Ü*: 1 199 ‚ÇΩ ‚Äî –Ω–∞—á–Ω–∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤\n"
        "üîπ *1 –≥–æ–¥*: 11 999 ‚ÇΩ ‚Äî –≤—ã–≥–æ–¥–Ω–æ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –æ–ø–æ—Ä—É\n\n"
        "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=subscription_plan_keyboard(),
        parse_mode="Markdown"
    )

@router.message(F.text.in_(["üóì –ö—É–ø–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü", "üìÖ –ö—É–ø–∏—Ç—å –Ω–∞ 1 –≥–æ–¥"]))
async def handle_payment_options(message: types.Message):
    telegram_id = str(message.from_user.id)
    plan = "monthly" if "–º–µ—Å—è—Ü" in message.text else "yearly"
    amount = 10000 if plan == "monthly" else 99000

    link = generate_payment_link(telegram_id, plan=plan)

    await message.answer(
        f"üí≥ –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏:\n\n{link}",
        reply_markup=main_menu()
    )

@router.message(F.text.in_(["üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É"]))
async def handle_info_files(message: types.Message):
    filename = {
        "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É": "guide.txt",
        "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": "rules.txt"
    }.get(message.text)
    try:
        with open(f"texts/{filename}", "r", encoding="utf-8") as f:
            response = f.read()
    except FileNotFoundError:
        response = "–§–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."
    await message.answer(response, reply_markup=main_menu())

@router.message(F.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def handle_reset(message: types.Message):
    db = SessionLocal()
    telegram_id = str(message.from_user.id)
    user = get_user_by_telegram_id(db, telegram_id)
    reset_user_thread(db, user)
    await message.answer("üîÅ –î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –¢—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.", reply_markup=main_menu())

@router.message(F.text.in_(["üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "üë• –ö–∞–±–∏–Ω–µ—Ç", "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"]))
async def handle_cabinet(message: types.Message):
    db = SessionLocal()
    telegram_id = str(message.from_user.id)
    user = get_user_by_telegram_id(db, telegram_id)
    message_text, markup = generate_cabinet_message(user, telegram_id, db)
    await message.answer(message_text, reply_markup=markup)

@router.message(F.text == "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
async def handle_partner(message: types.Message):
    try:
        with open("texts/partner.txt", "r", encoding="utf-8") as file:
            partner_info = file.read()
        await message.answer(partner_info, reply_markup=main_menu())
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ partner.txt:", e)
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ.", reply_markup=main_menu())

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_back(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
