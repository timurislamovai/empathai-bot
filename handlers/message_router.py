from telegram import Bot, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.orm import Session
from models import User, increment_message_count, get_user_by_telegram_id
from referral import generate_cabinet_message, generate_withdraw_info
from admin_commands import handle_admin_stats
from robokassa import generate_payment_url
from openai_api import reset_user_thread
from ui import main_menu, subscription_plan_keyboard

import time
from datetime import datetime

ADMIN_IDS = ["944583273", "396497806"]  # üîÅ –£–∫–∞–∂–∏ —Å–≤–æ–∏—Ö –∞–¥–º–∏–Ω–æ–≤

def handle_command(text: str, user: User, chat_id: int, bot: Bot, db: Session):
    if text == "/admin_referrals":
        if str(user.telegram_id) not in ADMIN_IDS:
            bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        try:
            handle_admin_stats(db, chat_id, bot)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_admin_stats: {e}")
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

    if text == "/admin_stats":
        if str(user.telegram_id) not in ADMIN_IDS:
            bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        try:
            total_users = db.query(User).count()
            paid_users = db.query(User).filter(User.has_paid == True).count()
            unlimited_users = db.query(User).filter(User.is_unlimited == True).count()

            bot.send_message(
                chat_id,
                f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}"
                f"üí≥ –° –ø–æ–¥–ø–∏—Å–∫–æ–π: {paid_users}"
                f"‚ôæ –ë–µ–∑–ª–∏–º–∏—Ç: {unlimited_users}"
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ /admin_stats: {e}")
            bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return

def handle_menu_button(text: str, user: User, chat_id: int, bot: Bot, db: Session):
    if text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        bot.send_message(
            chat_id,
            "üí° _–° EmpathAI —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –∫–∞–∫ –æ—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞._"
            "üîπ *1 –º–µ—Å—è—Ü*: 1 199 ‚ÇΩ ‚Äî –Ω–∞—á–Ω–∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤"
            "üîπ *1 –≥–æ–¥*: 11 999 ‚ÇΩ ‚Äî –≤—ã–≥–æ–¥–Ω–æ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –æ–ø–æ—Ä—É"
            "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=subscription_plan_keyboard(),
            parse_mode="Markdown"
        )
        return

    if text in ["üóì –ö—É–ø–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü", "üìÖ –ö—É–ø–∏—Ç—å –Ω–∞ 1 –≥–æ–¥"]:
        plan = "monthly" if text == "üóì –ö—É–ø–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü" else "yearly"
        invoice_id = int(time.time())
        payment_url = generate_payment_url(user.telegram_id, invoice_id, plan)
        bot.send_message(
            chat_id,
            "üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)]
            ])
        )
        return

    if text in ["üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É"]:
        filename = {
            "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É": "guide.txt",
            "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": "rules.txt"
        }.get(text)
        try:
            with open(f"texts/{filename}", "r", encoding="utf-8") as f:
                response = f.read()
        except FileNotFoundError:
            response = "‚ö†Ô∏è –§–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."
        bot.send_message(chat_id, response, reply_markup=main_menu())
        return

    if text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        reset_user_thread(db, user)
        bot.send_message(
            chat_id,
            "üîÅ –î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –¢—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä, –∏ —è –±—É–¥—É –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Å—ë —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.",
            reply_markup=main_menu()
        )
        return

    if text in ["üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "üë• –ö–∞–±–∏–Ω–µ—Ç", "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"]:
        message_text, markup = generate_cabinet_message(user, str(user.telegram_id), db)
        bot.send_message(chat_id, message_text, reply_markup=markup)
        return

    if text == "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞":
        referrals_count = db.query(User).filter(User.referrer_code == str(user.telegram_id)).count()
        total_earned = user.ref_earned or 0
        balance = user.ref_earned or 0
        message_text = generate_withdraw_info(user, referrals_count, total_earned, balance)
        bot.send_message(chat_id, message_text, reply_markup=main_menu())
        return

    if text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        bot.send_message(chat_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
        return
