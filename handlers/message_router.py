import time
import os

from handlers.message_router import handle_command, handle_menu_button

from models import get_user_by_telegram_id, create_user
from database import SessionLocal
import os

from telegram import Bot, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.orm import Session

from referral import generate_cabinet_message, generate_withdraw_info
from admin_commands import handle_admin_stats, handle_admin_referrals, give_unlimited_access
from robokassa import generate_payment_url
from openai_api import reset_user_thread, send_message_to_assistant
from ui import main_menu, subscription_plan_keyboard
from utils import clean_markdown
from filters import classify_crisis_level, log_crisis_message
from datetime import datetime
from telegram import Bot

ADMIN_IDS = ["944583273", "396497806"]  # üîÅ –£–∫–∞–∂–∏ —Å–≤–æ–∏—Ö –∞–¥–º–∏–Ω–æ–≤
FREE_MESSAGES_LIMIT = int(os.environ.get("FREE_MESSAGES_LIMIT", 50))

bot = Bot(token=os.environ["TELEGRAM_TOKEN"])

def handle_update(update, db):
    message = update.get("message")
    if not message:
        return

    text = message.get("text", "")
    chat_id = message["chat"]["id"]
    telegram_id = str(message["from"]["id"])

    user = get_user_by_telegram_id(db, telegram_id)
    if not user:
    user = create_user(db, telegram_id)
    
    if text.startswith("/"):
    handle_command(text, user, chat_id, bot, db)
    else:
    handle_menu_button(text, user, chat_id, bot, db)

def handle_command(text: str, user: User, chat_id: int, bot: Bot, db: Session):
    if text == "/admin_stats" and str(user.telegram_id) in ADMIN_IDS:
        handle_admin_stats(db, chat_id, bot)
        return

    if text == "/admin_referrals" and str(user.telegram_id) in ADMIN_IDS:
        handle_admin_referrals(db, chat_id, bot)
        return

    if text.startswith("/give_unlimited") and str(user.telegram_id) in ADMIN_IDS:
        give_unlimited_access(db, bot, chat_id, text)
        return

def handle_menu_button(text: str, user: User, chat_id: int, bot: Bot, db: Session):
    telegram_id = str(user.telegram_id)

    if text.startswith("/start"):
        parts = text.strip().split(" ", 1)
        ref_code = parts[1].strip() if len(parts) > 1 else None
    if ref_code and ref_code.startswith("ref"):
        ref_code = ref_code.replace("ref", "", 1)
    if ref_code and not ref_code.isdigit():
        ref_code = None

    if not user:
        user = create_user(db, telegram_id, referrer_code=ref_code)
    elif not user.referrer_code and ref_code:
        user.referrer_code = ref_code
        db.commit()

    bot.send_message(
        chat_id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–ü—Ä–∏–≤–µ—Ç, —è –ò–ª–∞ ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é.\n\n"
        "üÜì –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 50 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        "üí≥ –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n\n"
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
        reply_markup=main_menu()
    )
    return


    if text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        bot.send_message(
            chat_id,
            "üí° _–° EmpathAI —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –∫–∞–∫ –æ—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞._\n\n"
            "üîπ *1 –º–µ—Å—è—Ü*: 1 199 ‚ÇΩ ‚Äî –Ω–∞—á–Ω–∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤\n"
            "üîπ *1 –≥–æ–¥*: 11 999 ‚ÇΩ ‚Äî –≤—ã–≥–æ–¥–Ω–æ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –æ–ø–æ—Ä—É\n\n"
            "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=subscription_plan_keyboard(),
            parse_mode="Markdown"
        )
        return

    if text in ["üóì –ö—É–ø–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü", "üìÖ –ö—É–ø–∏—Ç—å –Ω–∞ 1 –≥–æ–¥"]:
        plan = "monthly" if text == "üóì –ö—É–ø–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü" else "yearly"
        invoice_id = int(time.time())
        payment_url = generate_payment_url(telegram_id, invoice_id, plan)
        bot.send_message(
            chat_id,
            "üîó –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)]
            ])
        )
        return

    if text in ["üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É"]:
        filename = {
            "‚ùì –ì–∏–¥ –ø–æ –±–æ—Ç—É": "guide.txt",
            "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è": "rules.txt"
        }.get(text)
        try:
            with open(f"texts/{filename}", "r", encoding="utf-8") as f:
                response = f.read()
        except FileNotFoundError:
            response = "–§–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."
        bot.send_message(chat_id, response, reply_markup=main_menu())
        return

    if text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        reset_user_thread(db, user)
        bot.send_message(
            chat_id,
            "üîÅ –î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –¢—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä, –∏ —è –±—É–¥—É –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Å—ë —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.",
            reply_markup=main_menu()
        )
        return
        
    if text == "üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        bot.send_message(chat_id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
        return

    if text in ["üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "üë• –ö–∞–±–∏–Ω–µ—Ç", "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"]:
        message_text, markup = generate_cabinet_message(user, telegram_id, db)
        bot.send_message(chat_id, message_text, reply_markup=markup)
        return

    if text == "ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞":
        referrals_count = db.query(User).filter(User.referrer_code == telegram_id).count()
        total_earned = user.ref_earned or 0
        balance = user.ref_earned or 0
        message_text = generate_withdraw_info(user, referrals_count, total_earned, balance)
        bot.send_message(chat_id, message_text, reply_markup=main_menu())
        return

    # üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    if not user.is_unlimited and user.free_messages_used >= FREE_MESSAGES_LIMIT:
        bot.send_message(
            chat_id,
            "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
            reply_markup=main_menu()
        )
        return

    # üßê –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    crisis_level = classify_crisis_level(text)
    if crisis_level in ["high", "medium", "low"]:
        log_crisis_message(telegram_id, text, level=crisis_level)
        if crisis_level == "high":
            bot.send_message(chat_id, (
                "–ú–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å —Ç–∞–∫–∏–µ —Ç—è–∂—ë–ª—ã–µ —á—É–≤—Å—Ç–≤–∞.\n\n"
                "–ï—Å–ª–∏ —Ç–µ–±–µ —Ç—è–∂–µ–ª–æ –∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –º—ã—Å–ª–∏ –Ω–∞–≤—Ä–µ–¥–∏—Ç—å —Å–µ–±–µ ‚Äî –≤–∞–∂–Ω–æ –Ω–µ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å —ç—Ç–∏–º –Ω–∞–µ–¥–∏–Ω–µ. "
                "–û–±—Ä–∞—Ç–∏—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –∏–ª–∏ –∫—Ä–∏–∑–∏—Å–Ω–æ–π —Å–ª—É–∂–±–µ. üíô\n\n"
                "–Ø —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ. –¢—ã –Ω–µ –æ–¥–∏–Ω(–æ–¥–Ω–∞)."
            ))
            return

    # ü§ñ GPT-–¥–∏–∞–ª–æ–≥
    try:
        assistant_response, thread_id = send_message_to_assistant(user.thread_id, text)
    except Exception as e:
        print('‚ùå –û—à–∏–±–∫–∞ –≤ GPT:', e)
        if "run is active" in str(e):
            user.thread_id = None
            db.commit()
            assistant_response, thread_id = send_message_to_assistant(None, text)
        else:
            raise e

    if not user.thread_id:
        update_user_thread_id(db, user, thread_id)

    increment_message_count(db, user)
    assistant_response = clean_markdown(assistant_response)
    bot.send_message(chat_id, assistant_response, reply_markup=main_menu())
