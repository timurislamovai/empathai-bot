# handlers/message_router.py
from ui import main_menu, subscription_plan_keyboard
from referral import generate_cabinet_message
from utils import clean_markdown
from openai_api import send_message_to_assistant, reset_user_thread
from models import increment_message_count
from filters import contains_crisis_words, log_crisis_message
from admin_commands import handle_admin_stats


from telegram import Bot
from sqlalchemy.orm import Session
from models import User





ADMIN_IDS = ["944583273", "396497806"]  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ ID

def handle_command(text: str, user: User, chat_id: int, bot: Bot, db: Session):
    if text == "/start":
        bot.send_message(chat_id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ò–ª–∞, –ò–ò-–ø—Å–∏—Ö–æ–ª–æ–≥ –æ—Ç EmpathAI. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç.", reply_markup=main_menu())
        return

    if text == "/admin_referrals":
        if str(user.telegram_id) in ADMIN_IDS:
            try:
                handle_admin_stats(db, chat_id, bot)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_admin_stats: {e}")
        else:
            bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if text.startswith("/give_unlimited"):
        if str(user.telegram_id) not in ADMIN_IDS:
            bot.send_message(chat_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        parts = text.strip().split()
        if len(parts) != 2:
            bot.send_message(chat_id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give_unlimited <telegram_id>")
            return

        target_id = parts[1]
        target_user = get_user_by_telegram_id(db, target_id)
        if target_user:
            target_user.is_unlimited = True
            db.commit()
            bot.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –≤—ã–¥–∞–Ω –±–µ–∑–ª–∏–º–∏—Ç.")
        else:
            bot.send_message(chat_id, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    bot.send_message(chat_id, "ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=main_menu())




def handle_menu_button(text, user, chat_id, bot, db):
    if text in ["üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "üë• –ö–∞–±–∏–Ω–µ—Ç", "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"]:
        message_text, markup = generate_cabinet_message(user, str(user.telegram_id), db)
        bot.send_message(chat_id, message_text, reply_markup=markup)
        return

    if text == "üÜò –ü–æ–º–æ—â—å":
        bot.send_message(chat_id, "‚ÑπÔ∏è –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —É –≤–∞—Å –Ω–∞ –¥—É—à–µ. –Ø –æ—Ç–≤–µ—á—É –∏ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å üí¨", reply_markup=main_menu())
        return

    if text == "‚ÑπÔ∏è –û –Ω–∞—Å":
        bot.send_message(chat_id, "–Ø ‚Äî –ò–ª–∞, –≤–∞—à –ò–ò-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –ì–æ—Ç–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É.", reply_markup=main_menu())
        return

    if text == "üìú –£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è":
        bot.send_message(chat_id, "–ü–æ–ª–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: [—Å—Å—ã–ª–∫–∞]", reply_markup=main_menu())
        return

    if text == "üîÅ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        reset_user_thread(db, user)
        bot.send_message(chat_id, "‚ôªÔ∏è –î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä, –∏ —è –∑–∞–±—É–¥—É –≤—Å—ë, —á—Ç–æ –±—ã–ª–æ —Å–∫–∞–∑–∞–Ω–æ —Ä–∞–Ω–µ–µ.", reply_markup=main_menu())
        return

    if text in ["üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "üóì –ö—É–ø–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü", "üìÖ –ö—É–ø–∏—Ç—å –Ω–∞ 1 –≥–æ–¥"]:
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=subscription_plan_keyboard())
        return

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ –º–µ–Ω—é –Ω–µ –ø–æ–¥–æ—à–ª–æ ‚Äî —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–±—ã—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if contains_crisis_words(text):
        log_crisis_message(user, text)

    try:
        assistant_response, thread_id = send_message_to_assistant(user.thread_id, text)
        user.thread_id = thread_id
        increment_message_count(db, user)
        assistant_response = clean_markdown(assistant_response)
        bot.send_message(chat_id, assistant_response, reply_markup=main_menu())
    except Exception as e:
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

