import os
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from handlers import handle_update
from db import engine, Base

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN      = os.environ["TELEGRAM_TOKEN"]
OPENAI_API_KEY      = os.environ["OPENAI_API_KEY"]
ASSISTANT_ID        = os.environ["ASSISTANT_ID"]
DATABASE_URL        = os.environ["DATABASE_URL"]

# –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (50 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
FREE_MESSAGES_LIMIT = int(os.environ.get("FREE_MESSAGES_LIMIT", 50))

app = FastAPI()

from sqlalchemy import text

@app.on_event("startup")
async def startup():
    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users, –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        with engine.connect() as conn:
            conn.execute(text("DROP TABLE IF EXISTS users"))
            print("üóëÔ∏è –¢–∞–±–ª–∏—Ü–∞ users —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:", e)

    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    Base.metadata.create_all(bind=engine)
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã")

    # –ù–∞—Å—Ç—Ä–æ–∏–º Telegram webhook
    await setup_webhook()

@app.get("/")
async def root():
    return {"status": "ok"}

@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    try:
        return await handle_update(data)
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})
