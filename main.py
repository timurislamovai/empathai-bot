from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
import traceback
import json
from aiogram.types import Update
import aiogram
from datetime import datetime, timedelta

from bot_instance import bot, dp
from handlers import gptchat, menu_handlers, aiogram_handlers, admin_handlers_aiogram
from cloudpayments import verify_signature
from database import SessionLocal
from models import get_user_by_telegram_id
from ui import main_menu


# ----------------------
# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
# ----------------------
dp.include_routers(
    admin_handlers_aiogram.router,  # ‚Üê –ü–ï–†–í–´–ú!
    gptchat.router,
    menu_handlers.router,
    aiogram_handlers.router
)

app = FastAPI()
print("üí° AIOGRAM VERSION:", aiogram.__version__)


# ----------------------
# –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
# ----------------------
@app.get("/")
async def root():
    return {"status": "ok"}


# ----------------------
# CloudPayments webhook
# ----------------------
@app.post("/payment/cloudpayments/result")
async def cloudpayments_result(request: Request):
    try:
        raw_body = await request.body()
        signature = request.headers.get("Content-HMAC", "")
        print("üì¶ RAW BODY:", raw_body.decode())

        if not verify_signature(raw_body, signature):
            return JSONResponse(content={"code": 1, "message": "Invalid signature"}, status_code=400)

        # –ü–∞—Ä—Å–∏–Ω–≥ x-www-form-urlencoded
        from urllib.parse import parse_qs
        parsed = parse_qs(raw_body.decode())
        data = {k: v[0] for k, v in parsed.items()}

        print("‚úÖ –ü–æ–¥–ø–∏—Å—å CloudPayments –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
        print("üì® –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data)

        if data.get("Status") != "Completed":
            print("‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω:", data.get("Status"))
            return {"code": 0}

        # –ü–æ–ª—É—á–µ–Ω–∏–µ telegram_id –∏ –ø–ª–∞–Ω–∞
        telegram_id = None
        plan = None
        raw_data = data.get("Data")

        if raw_data:
            try:
                parsed_data = json.loads(raw_data)
                telegram_id = parsed_data.get("telegram_id")
                plan = parsed_data.get("plan")
            except Exception as e:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–æ–ª—è Data:", e)

        if not telegram_id or not plan:
            invoice_id = data.get("InvoiceId")
            if invoice_id and invoice_id.startswith("sub_"):
                try:
                    _, tid, pl = invoice_id.split("_")
                    telegram_id = tid
                    plan = pl
                except Exception as e:
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ InvoiceId:", e)

        print(f"üë§ Telegram ID: {telegram_id}")
        print(f"üì¶ –ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏: {plan}")

        if not telegram_id or not plan:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")
            return {"code": 0}

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db = SessionLocal()
        user = get_user_by_telegram_id(db, str(telegram_id))
        if user:
            now = datetime.utcnow()
            days = 30 if plan == "monthly" else 365
            user.has_paid = True

            current_expiry = user.subscription_expires_at or now
            base_date = max(current_expiry, now)
            user.subscription_expires_at = base_date + timedelta(days=days)

            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
            if user.referrer_code:
                try:
                    referrer = get_user_by_telegram_id(db, str(user.referrer_code))
                    if referrer:
                        amount = float(data.get("Amount", "0").replace(",", "."))
                        reward = round(amount * 0.3, 2)
                        referrer.referral_earned = (referrer.referral_earned or 0.0) + reward
                        print(f"üéâ –ù–∞—á–∏—Å–ª–µ–Ω–æ {reward}‚ÇΩ —Ä–µ—Ñ–µ—Ä–∞–ª—É {referrer.telegram_id}")
                except Exception as e:
                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞:", e)

            db.commit()
            print(f"üìÜ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ: {user.subscription_expires_at}")

            try:
                await bot.send_message(
                    chat_id=int(telegram_id),
                    text="‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ üíô",
                    reply_markup=main_menu()
                )
            except Exception as send_err:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", send_err)
        else:
            print("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")

        return {"code": 0}

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö CloudPayments:", e)
        traceback.print_exc()
        return JSONResponse(content={"code": 2, "message": "Internal error"}, status_code=500)


# ----------------------
# Telegram webhook
# ----------------------
@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        print("‚úÖ /webhook –≤—ã–∑–≤–∞–Ω\nüì® Raw data:", data)

        update = Update(**data)
        await dp.feed_update(bot, update)
        return {"ok": True}
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ webhook:", e)
        traceback.print_exc()
        return JSONResponse(status_code=500, content={"error": str(e)})
